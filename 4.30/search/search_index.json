{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>The Appium XCUITest Driver is a combined solution, which allows performing automated black-box testing of iOS and tvOS native applications and WebKit web views. The native testing is based on Apple's XCTest framework and the fork of Facebook's WebDriverAgent server (the original project is not supported anymore). Web views communication is done via Webkit remote debugger protocol. Real devices communication is ensured by appium-ios-device library. Simulators communication is ensured by appium-ios-simulator library.</p> <p>In the native mode the driver operates in scope of WebDriver W3C protocol with several platform-specific extensions. Web views communication only supports the obsolete JWP protocol.</p> <p>Use the navigation on the left or proceed to Setup!</p>"},{"location":"actions/","title":"About iOS Input Events","text":""},{"location":"actions/#what-are-input-events","title":"What Are Input Events","text":"<p>iOS uses events concept to handle signals received from different input devices. An event is an object, which is generated in response to a signal from an input device. These objects are then delivered to the corresponding kernel subsystem, which processes them and notifies all listening processes about taps, key presses, swipes, etc. This means that in order to emulate a signal generated by an external device, such as touch screen, it is necessary to just send event objects with the same properties and in the same sequence as they would be generated by a real device.</p>"},{"location":"actions/#lets-simulate-a-single-tap","title":"Lets Simulate a Single Tap","text":"<p>The events API itself is a part of Apple private API and is not open sourced and neither it is documented. XCTest framework also does not expose any public APIs for input events generation. Although, there is a possibility to perform events generation via XCTest private undocumented APIs. In particular, we are interested in XCPointerEventPath and XCSynthesizedEventRecord interfaces. These APIs allow to create chains of input events and supply them to the system kernel for execution.</p> <p>In order to synthesize a single tap it is necessary to: - Create a new <code>XCPointerEventPath</code> instance and init it for touch at the starting point - Add a new <code>liftUp</code> event at <code>0.125s</code> offset using <code>liftUpAtOffset:</code> method - Add the generated event path object to <code>XCSynthesizedEventRecord</code> instance using <code>addPointerEventPath:</code> method - Execute the events using <code>synthesizeWithError:</code> method of <code>XCSynthesizedEventRecord</code> instance and control the returned error</p> <p>There are several limitations to these APIs: - Each <code>XCPointerEventPath</code> instance can only be executed for a single action. If one tries to add, for example, two taps to a single path, then these are effectively ignored - Each <code>XCPointerEventPath</code> instance can only be initialized for a particular pointer type: touch, mouse (since Xcode 10.2) or keyboard (since Xcode 10.2) - Events can only be added with increasing offset values to an existing <code>XCPointerEventPath</code> instance</p>"},{"location":"actions/#how-about-more-complicated-actions","title":"How About More Complicated Actions","text":"<p>Unfortunately, the API is private and has zero documentation. That is why one can only figure out what it really can while playing with it and trying different input combinations. It is known that providing multiple <code>XCPointerEventPath</code> instances with overlapping timeouts will generate a multitouch action with the amount of fingers equal to the amount of the supplied event paths. So, in order to generate two-finger symmetric swipe we need to supply the following events:</p> <ul> <li>Create a two <code>XCPointerEventPath</code> instances and init them for touch at the starting point</li> <li>Add a <code>moveToPoint</code> event at <code>0.525s</code> offset using <code>moveToPoint:</code> method to each path</li> <li>Add a <code>liftUp</code> eventa at <code>0.525s</code> offset using <code>liftUpAtOffset:</code> method to each path</li> <li>Add the generated event paths to <code>XCSynthesizedEventRecord</code> instance using <code>addPointerEventPath:</code> method</li> <li>Execute the events using <code>synthesizeWithError:</code> method of <code>XCSynthesizedEventRecord</code> instance and control the returned error</li> </ul>"},{"location":"actions/#further-reading","title":"Further Reading","text":"<p>Unfortunately, there is no information on this topic at all (private API <code>\u00af\\_(\u30c4)_/\u00af</code>). Consider visiting the following resources:</p> <ul> <li>https://github.com/appium/WebDriverAgent/tree/master/PrivateHeaders/XCTest</li> <li>https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CTouchActionsIntegrationTests.m</li> <li>https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentTests/IntegrationTests/FBW3CMultiTouchActionsIntegrationTests.m</li> <li>https://github.com/appium/WebDriverAgent/blob/master/WebDriverAgentLib/Utilities/FBW3CActionsSynthesizer.m</li> </ul>"},{"location":"attach-to-running-wda/","title":"Attach to a running WebDriverAgent application","text":"<p>XCUITest driver provides <code>appium:webDriverAgentUrl</code> capability to attach to a running WebDriverAgent application. This works for real devices and simulators, but primary usage is for real devices.</p>"},{"location":"attach-to-running-wda/#how-to-use-appiumwebdriveragenturl-capability","title":"How to use <code>appium:webDriverAgentUrl</code> capability","text":"<ol> <li>Start a WebDriverAgent application on a device</li> <li>Start an XCUITest driver session with <code>appium:webDriverAgentUrl</code> capability</li> </ol> <p>Please read Manage WebDriverAgent by yourself and Real Device Configuration about how to prepare a WebDriverAgent application for real devices and start it.</p> <p>The <code>appium:webDriverAgentUrl</code> should be <code>http://&lt;reachable ip address for the device&gt;:8100</code>. If the environment had port-forward to the connected device, it can be <code>http://localhost:8100</code>.</p> <pre><code>{\n\"platformName\": \"ios\",\n\"appium:automationName\": \"xcuitest\",\n\"appium:platformVersion\": \"15.5\",\n\"appium:udid\": \"&lt;the device's udid&gt;\",\n\"appium:deviceName\": \"iPhone\",\n\"appium:webDriverAgentUrl\": \"http://&lt;reachable ip address for the device&gt;:8100\"\n}\n</code></pre> <p>This method allows you to manage the WebDriverAgent application process by yourself. XCUITest driver simply attaches to the WebDriverAgent application process. It may improve the application performance.</p>"},{"location":"audio-capture/","title":"Audio Capture","text":""},{"location":"audio-capture/#client-side-api","title":"Client Side API","text":"<p>Since Appium 1.18.0 there is a possibility to record iOS audio stream and save it to a file, which could be then retrieved on the client side. Apple does not provide any API to directly retrieve the audio stream from a Simulator or a real device, but it is possible to redirect that stream to the host machine, where it could be captured.</p> <ul> <li>mobile: startAudioRecording</li> <li>mobile: stopAudioRecording</li> </ul>"},{"location":"audio-capture/#server-requirements","title":"Server Requirements","text":"<p>Appium version should be 1.18.0 or newer.</p> <p>It is mandatory that the host machine has FFMPEG installed and available in PATH. On macOS it could be installed via Brew: <code>brew install ffmpeg</code>.</p> <p>macOS since version 10.15 requires applications that record Microphone audio to be explicitly enabled in System Preferences-&gt;Security &amp; Privacy-&gt;Privacy-&gt;Microphone tab. Make sure either FFMPEG itself or the parent Appium process (e.g. Terminal) is present in that list.</p> <p>The feature is potentially unsecure, so it must be explicitly allowed on the server side. The feature name is <code>audio_record</code>. See Security for more details.</p>"},{"location":"audio-capture/#simulator-setup","title":"Simulator Setup","text":"<p>The following steps are necessary to setup iOS Simulator audio capture:</p> <ul> <li>Install Soundflower</li> <li>Redirect Simulator audio output to Soundflower. From the main Simulator menu select I/O-&gt;Audio Output-&gt;Soundflower (2ch)</li> <li>Run <code>ffmpeg -f avfoundation -list_devices true -i \"\"</code> command in Terminal to get the identifier of the <code>Soundflower (2ch)</code> device. This identifier prefixed with <code>:</code> will be then used as <code>audioInput</code> argument to <code>mobile: startAudioRecording</code> call</li> <li>Test that your setup works as expected. Run any audio playback in Simulator and execute the following command in Terminal (do not forget to replace the <code>-i</code> argument value with the one you got from the previous step): <code>ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4</code>. After 5 seconds there should be <code>out.mp4</code> file on your Desktop containing the recorded audio stream.</li> </ul>"},{"location":"audio-capture/#real-device-setup","title":"Real Device Setup","text":"<p>The following steps are necessary to setup iOS Real Device audio capture:</p> <ul> <li>Connect your device to the Mac host with a cable</li> <li>Run <code>open -a /System/Applications/Utilities/Audio\\ MIDI\\ Setup.app</code> application</li> <li>Find your phone in the list of devices there and click <code>Enable</code> button next to it</li> <li>Run <code>ffmpeg -f avfoundation -list_devices true -i \"\"</code> command in Terminal and find the identifier of your device in the <code>AVFoundation audio devices</code> list. This identifier prefixed with <code>:</code> will be then used as <code>audioInput</code> argument to <code>mobile: startAudioRecording</code> call</li> <li>Test that your setup works as expected. Run any audio playback on the device and execute the following command in Terminal (do not forget to replace the <code>-i</code> argument value with the value you got from the previous step): <code>ffmpeg -t 5 -f avfoundation -i \":1\" -c:a aac -b:a 128k -ac 2 -ar 44100 -y ~/Desktop/out.mp4</code>. After 5 seconds there should be <code>out.mp4</code> file on your Desktop containing the recorded audio stream.</li> </ul> <p>Apple does not allow phone calls to be redirected this way. You can only record application or system sounds.</p>"},{"location":"audio-capture/#further-reading","title":"Further Reading","text":"<ul> <li>https://github.com/appium/appium-xcuitest-driver/pull/1207</li> <li>https://www.macobserver.com/tips/quick-tip/iphone-audio-input-mac/</li> <li>http://www.lorisware.com/blog/2012/04/28/recording-iphone-emulator-video-with-sound/</li> </ul>"},{"location":"capabilities/","title":"Capabilities","text":""},{"location":"capabilities/#general","title":"General","text":"Capability\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>platformName</code> Could be set to <code>ios</code>. Appium itself is not strict about this capability value if <code>automationName</code> is provided, so feel free to assign it to any supported platform name if this is needed, for example, to make Selenium Grid working. <code>appium:automationName</code> Must always be set to <code>xcuitest</code>. Values of <code>automationName</code> are compared case-insensitively. <code>appium:deviceName</code> The name of the device under test. Consider setting <code>udid</code> for real devices and use this one for Simulator selection instead <code>appium:platformVersion</code> The platform version of an emulator or a real device. This capability is used for device autodetection if <code>udid</code> is not provided <code>appium:udid</code> UDID of the device to be tested. Could be retrieved from Xcode-&gt;Window-&gt;Devices and Simulators window. Always set this capability if you run parallel tests or use a real device to run your tests. <code>appium:noReset</code> Prevents the device to be reset before the session startup if set to <code>true</code>. This means that the application under test is not going to be terminated neither its data cleaned. <code>false</code> by default <code>appium:fullReset</code> Being set to <code>true</code> always enforces the application under test to be fully uninstalled before starting a new session. <code>false</code> by default <code>appium:printPageSourceOnFindFailure</code> Enforces the server to dump the actual XML page source into the log if any error happens. <code>false</code> by default. <code>browserName</code> The name of the browser to run the test on. If this capability is provided then the driver will try to start the test in Web context mode (Native mode is applied by default). Read Automating hybrid apps for more details. Usually equals to <code>safari</code>. <code>appium:includeDeviceCapsToSessionInfo</code> Whether to include screen information as the result of Get Session Capabilities. It includes <code>pixelRatio</code>, <code>statBarHeight</code> and <code>viewportRect</code>, but it causes an extra API call to WDA which may increase the response time like this issue. Defaults to <code>true</code>. <code>appium:resetLocationService</code> Whether reset the location service in the session deletion on real device. Defaults to <code>false</code>. <code>appium:customSSLCert</code> Adds a root SSL certificate to IOS Simulators and real devices. Real devices only work if py-ios-device tool is available on the server machine. The certificate content must be provided in PEM format"},{"location":"capabilities/#app","title":"App","text":"Capability Description <code>appium:bundleId</code> Bundle identifier of the app under test, for example <code>com.mycompany.myapp</code>. The capability value is calculated automatically if <code>app</code> is provided. If neither <code>app</code> or <code>bundleId</code> capability is provided then XCUITest driver starts from the Home screen. <code>appium:app</code> Full path to the application to be tested (the app must be located on the same machine where the server is running). <code>.ipa</code> and <code>.app</code> application extensions are supported. Zipped <code>.app</code> bundles are supported as well. Could also be an URL to a remote location. If neither of the <code>app</code> or <code>bundleId</code> capabilities are provided then the driver starts from the Home screen and expects the test to know what to do next. Do not provide both <code>app</code> and <code>browserName</code> capabilities at once. <code>appium:enforceAppInstall</code> If set to <code>false</code> it will make xcuitest driver to verify whether the app version currently installed on the device under test is older than the one, which is provided as <code>appium:app</code> value. No app reinstall is going to happen if the candidate app has the same or older version number than the already installed copy of it. The version number used for comparison must be provided as CFBundleVersion Semantic Versioning-compatible value in the application's Info.plist. No validation is performed by default, e.g. the provided app is always (re)installed, which could potentially slow down your test suites. Available since XCUITest driver 4.19.0. <code>appium:localizableStringsDir</code> Where to look for localizable strings in the application bundle. Defaults to <code>en.lproj</code> <code>appium:otherApps</code> App or list of apps (as a JSON array) to install prior to running tests. For example: <code>[\"http://appium.github.io/appium/assets/TestApp9.4.app.zip\", \"/path/to/app-b.app\"]</code> <code>appium:language</code> Language to set for iOS app, for example <code>fr</code>. Please read Language IDs to get more details about available values for this capability. If a test is executed on a Simulator then UI language is changed as well. You can also change Simulator language in runtime using mobile: configureLocalization extension. <code>appium:locale</code> Locale to set for iOS app, for example <code>fr_CA</code>. Please read Locale IDs to get more details about available values for this capability. If a test is executed on a Simulator then UI locale is changed as well. You can also change Simulator locale in runtime using mobile: configureLocalization extension. <code>appium:calendarFormat</code> Calendar format to set for iOS Simulator, for example <code>gregorian</code> or <code>persian</code>. Can only be set in conjunction with <code>appium:locale</code>. <code>appium:appPushTimeout</code> The timeout for application upload in milliseconds. Works for real devices only. The default value is <code>30000</code>ms <code>appium:appInstallStrategy</code> Select application installation strategy for real devices. The following strategies are supported: <code>serial</code> (default) - pushes app files to the device in a sequential order; this is the least performant strategy, although the most reliable; <code>parallel</code> - pushes app files simultaneously; this is usually the the most performant strategy, but sometimes could not be very stable; <code>ios-deploy</code> - tells the driver to use a third-party tool ios-deploy to install the app; obviously the tool must be installed separately first and must be present in PATH before it could be used."},{"location":"capabilities/#webdriveragent","title":"WebDriverAgent","text":"Capability Description Values <code>appium:xcodeOrgId</code> Apple developer team identifier string. Must be used in conjunction with <code>xcodeSigningId</code> to take effect. e.g., <code>JWL241K123</code> <code>appium:xcodeSigningId</code> String representing a signing certificate. Must be used in conjunction with <code>xcodeOrgId</code>. This is usually just <code>iPhone Developer</code>, so the default (if not included) is <code>iPhone Developer</code> e.g., <code>iPhone Developer</code> <code>appium:xcodeConfigFile</code> Full path to an optional Xcode configuration file that specifies the code signing identity and team for running the <code>WebDriverAgent</code> on the real device. e.g., <code>/path/to/myconfig.xcconfig</code> <code>appium:updatedWDABundleId</code> Bundle id to update WDA to before building and launching on real devices. This bundle id must be associated with a valid provisioning profile. e.g., <code>io.appium.WebDriverAgentRunner</code> <code>appium:keychainPath</code> Full path to the private development key exported from the system keychain. Used in conjunction with <code>keychainPassword</code> when testing on real devices. e.g., <code>/path/to/MyPrivateKey.p12</code> <code>appium:keychainPassword</code> Password for unlocking keychain specified in <code>keychainPath</code>. e.g., <code>super awesome password</code> <code>appium:derivedDataPath</code> Use along with usePrebuiltWDA capability and choose where to search for the existing WDA app. If the capability is not set then Xcode will store the derived data in the default root taken from preferences. <code>appium:webDriverAgentUrl</code> If provided, Appium will connect to an existing <code>WebDriverAgent</code> instance at this URL instead of starting a new one. e.g., <code>http://localhost:8100</code> <code>appium:useNewWDA</code> If <code>true</code>, forces uninstall of any existing <code>WebDriverAgent</code> app on device. Set it to <code>true</code> if you want to apply different startup options for <code>WebDriverAgent</code> for each session. Although, it is only guaranteed to work stable on Simulator. Real devices require <code>WebDriverAgent</code> client to run for as long as possible without reinstall/restart to avoid issues like https://github.com/facebook/WebDriverAgent/issues/507. The <code>false</code> value (the default behaviour since driver version 2.35.0) will try to detect currently running WDA listener executed by previous testing session(s) and reuse it if possible, which is highly recommended for real device testing and to speed up suites of multiple tests in general. A new WDA session will be triggered at the default URL (http://localhost:8100) if WDA is not listening and <code>webDriverAgentUrl</code> capability is not set. The negative/unset value of <code>useNewWDA</code> capability has no effect prior to xcuitest driver version 2.35.0. e.g., <code>true</code> <code>appium:wdaLaunchTimeout</code> Time, in ms, to wait for <code>WebDriverAgent</code> to be pingable. Defaults to 60000ms. e.g., <code>30000</code> <code>appium:wdaConnectionTimeout</code> Timeout, in ms, for waiting for a response from <code>WebDriverAgent</code>. Defaults to 240000ms. e.g., <code>1000</code> <code>appium:wdaStartupRetries</code> Number of times to try to build and launch <code>WebDriverAgent</code> onto the device. Defaults to 2. e.g., <code>4</code> <code>appium:wdaStartupRetryInterval</code> Time, in ms, to wait between tries to build and launch <code>WebDriverAgent</code>. Defaults to 10000ms. e.g., <code>20000</code> <code>appium:wdaLocalPort</code> This value if specified, will be used to forward traffic from Mac host to real ios devices over USB. Default value is same as port number used by WDA on device. e.g., <code>8100</code> <code>appium:wdaBaseUrl</code> This value if specified, will be used as a prefix to build a custom <code>WebDriverAgent</code> url. It is different from <code>webDriverAgentUrl</code>, because if the latter is set then it expects <code>WebDriverAgent</code> to be already listening and skips the building phase. Defaults to <code>http://localhost</code> e.g., <code>http://192.168.1.100</code> <code>appium:showXcodeLog</code> Whether to display the output of the Xcode command used to run the tests. If this is <code>true</code>, there will be lots of extra logging at startup. Defaults to <code>false</code> e.g., <code>true</code> <code>appium:iosInstallPause</code> Time in milliseconds to pause between installing the application and starting <code>WebDriverAgent</code> on the device. Used particularly for larger applications. Defaults to <code>0</code> e.g., <code>8000</code> <code>appium:usePrebuiltWDA</code> Skips the build phase of running the WDA app. Building is then the responsibility of the user. Only works for Xcode 8+. Defaults to <code>false</code>. e.g., <code>true</code> <code>appium:prebuiltWDAPath</code> The path to a WebDriverAgentRunner application package to be installed with <code>appium:usePreinstalledWDA</code> capability for real devices. The package's bundle id will be used over <code>appium:updatedWDABundleId</code>. e.g., <code>/path/to/WebDriverAgentRunner-Runner.app</code> <code>appium:usePreinstalledWDA</code> Whether to launch a preinstalled WebDriverAgentRunner application using a custom XCTest API client (via <code>com.apple.instruments</code> service) instead of running <code>xcodebuild</code> for real devices. If <code>appium:prebuiltWDAPath</code>  is provided, XCUITest driver will install it before launching the application. The preinstalled WebDriverAgent package must have been built by Xcode 12+. The default target bundle identifier is <code>com.facebook.WebDriverAgentRunner.xctrunner</code>. If <code>appium:updatedWDABundleId</code> is provided, <code>&lt;appium:updatedWDABundleId&gt;.xctrunner</code> will be launched. Please read Run Preinstalled WebDriverAgentRunner for more details. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:shouldUseSingletonTestManager</code> Use default proxy for test management within <code>WebDriverAgent</code>. Setting this to <code>false</code> sometimes helps with socket hangup problems. Defaults to <code>true</code>. e.g., <code>false</code> <code>appium:waitForIdleTimeout</code> The amount of time in float seconds to wait until the application under test is idling. XCTest requires the app's main thread to be idling in order to execute any action on it, so WDA might not even start/freeze if the app under test is constantly hogging the main thread. The default value is <code>10</code> (seconds). Setting it to zero disables idling checks completely (not recommended) and has the same effect as setting <code>waitForQuiescence</code> to <code>false</code>. Available since Appium 1.20.0. <code>appium:useXctestrunFile</code> Use Xctestrun file to launch WDA. It will search for such file in <code>bootstrapPath</code>. Expected name of file is <code>WebDriverAgentRunner_iphoneos&lt;sdkVersion&gt;-arm64.xctestrun</code> for real device and <code>WebDriverAgentRunner_iphonesimulator&lt;sdkVersion&gt;-x86_64.xctestrun</code> for simulator. One can do <code>build-for-testing</code> for <code>WebDriverAgent</code> project for simulator and real device and then you will see Product Folder like this and you need to copy content of this folder at <code>bootstrapPath</code> location. Since this capability expects that you have already built <code>WDA</code> project, it neither checks whether you have necessary dependencies to build <code>WDA</code> nor will it try to build project. Defaults to <code>false</code>. Tips: <code>Xcodebuild</code> builds for the target platform version. We'd recommend you to build with minimal OS version which you'd like to run as the original WDA module. e.g. If you build WDA for 12.2, the module cannot run on iOS 11.4 because of loading some module error on simulator. A module built with 11.4 can work on iOS 12.2. (This is xcodebuild's expected behaviour.) e.g., <code>true</code> <code>appium:useSimpleBuildTest</code> Build with <code>build</code> and run test with <code>test</code> in xcodebuild for all Xcode version if this is <code>true</code>, or build with <code>build-for-testing</code> and run tests with <code>test-without-building</code> for over Xcode 8 if this is <code>false</code>. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:wdaEventloopIdleDelay</code> Delays the invocation of <code>-[XCUIApplicationProcess setEventLoopHasIdled:]</code> by the number of seconds specified with this capability. This can help quiescence apps that fail to do so for no obvious reason (and creating a session fails for that reason). This increases the time for session creation because <code>-[XCUIApplicationProcess setEventLoopHasIdled:]</code> is called multiple times. If you enable this capability start with at least <code>3</code> seconds and try increasing it, if creating the session still fails. Defaults to <code>0</code>. e.g. <code>5</code> <code>appium:processArguments</code> Process arguments and environment which will be sent to the <code>WebDriverAgent</code> server in a new session request. Please use mobile:launchApp to launch an application with process arguments in the middle of a session. <code>{ args: [\"a\", \"b\", \"c\"] , env: { \"a\": \"b\", \"c\": \"d\" } }</code> or <code>'{\"args\": [\"a\", \"b\", \"c\"], \"env\": { \"a\": \"b\", \"c\": \"d\" }}'</code> <code>appium:autoLaunch</code> When set to <code>false</code>, prevents the application under test from being launched automatically as a part of the new session startup process. The launch become the responsibility of the user. Defaults to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:allowProvisioningDeviceRegistration</code> Allow <code>xcodebuild</code> to register your destination device on the developer portal if necessary. Requires a developer account to have been added in Xcode's Accounts preference pane. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:resultBundlePath</code> Specify the path to the result bundle path as <code>xcodebuild</code> argument for <code>WebDriverAgent</code> build under a security flag (Please check Opt-in Features section below). <code>WebDriverAgent</code> process must start/stop every time to pick up changed value of this property. Specifying <code>useNewWDA</code> to <code>true</code> may help there. Please read <code>man xcodebuild</code> for more details. e.g. <code>/path/to/resultbundle</code> <code>appium:resultBundleVersion</code> Specify the version of result bundle as <code>xcodebuild</code> argument for <code>WebDriverAgent</code> build. The default value depends on your Xcode version. Please read <code>man xcodebuild</code> for more details. e.g. <code>/path/to/resultbundle</code> <code>appium:maxTypingFrequency</code> Maximum frequency of keystrokes for typing and clear. If your tests are failing because of typing errors, you may want to adjust this. Defaults to 60 keystrokes per minute. e.g., <code>30</code> <code>appium:simpleIsVisibleCheck</code> Use native methods for determining visibility of elements. In some cases this takes a long time. Setting this capability to <code>false</code> will cause the system to use the position and size of elements to make sure they are visible on the screen. This can, however, lead to false results in some situations. Defaults to <code>false</code>, except iOS 9.3, where it defaults to <code>true</code>. e.g., <code>true</code>, <code>false</code> <code>appium:waitForQuiescence</code> It allows to turn on/off waiting for application quiescence in <code>WebDriverAgent</code>, while performing queries. The default value is <code>true</code>. You can avoid this kind of issues if you turn it off. Consider using <code>waitForIdleTimeout</code> capability instead for this purpose since Appium 1.20.0 e.g <code>false</code> <code>appium:mjpegServerPort</code> The port number on which WDA broadcasts screenshots stream encoded into MJPEG format from the device under test. It might be necessary to change this value if the default port is busy because of other tests running in parallel. Default value: <code>9100</code> e.g. <code>12000</code> <code>appium:screenshotQuality</code> Changes the quality of phone display screenshots following xctest/xctimagequality  Default value is <code>1</code>. <code>0</code> is the highest and <code>2</code> is the lowest quality. You can also change it via settings command. <code>0</code> might cause OutOfMemory crash on high-resolution devices like iPad Pro. e.g. <code>0</code>, <code>1</code>, <code>2</code> <code>appium:autoAcceptAlerts</code> Accept all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is <code>false</code>. <code>true</code> or <code>false</code> <code>appium:autoDismissAlerts</code> Dismiss all iOS alerts automatically if they pop up. This includes privacy access permission alerts (e.g., location, contacts, photos). Default is <code>false</code>. <code>true</code> or <code>false</code> <code>appium:disableAutomaticScreenshots</code> Disable automatic screenshots taken by XCTest at every interaction. Default is up to <code>WebDriverAgent</code>'s config to decide, which currently defaults to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:shouldTerminateApp</code> Specify if the app should be terminated on session end. This capability only has an effect if an application identifier has been passed to the test session (either explicitly, by setting bundleId, or implicitly, by providing app). Default is <code>true</code> unless <code>noReset</code> capability is set to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:forceAppLaunch</code> Specify if the app should be forcefully restarted if it is already running on session startup. This capability only has an effect if an application identifier has been passed to the test session (either explicitly, by setting bundleId, or implicitly, by providing app). Default is <code>true</code> unless <code>noReset</code> capability is set to <code>true</code>. <code>true</code> or <code>false</code> <code>appium:useNativeCachingStrategy</code> Set this capability to <code>false</code> in order to use the custom elements caching strategy. This might help to avoid stale element exception on property change. By default the native XCTest cache resolution is used (<code>true</code>) for all native locators (e.g. all, but xpath). Check the corresponding WebDriverAgent pull request for more details. <code>true</code> or <code>false</code>"},{"location":"capabilities/#simulator","title":"Simulator","text":"Capability Description Values <code>appium:orientation</code> Start a test session in a certain orientation. Note, that Simulator may ignore this capability if the simulated device itself does not support orientation change in its current state. For example, iPhones only allow orientation change to landscape if an app that declares landscape support in its manifest is running. Thus changing the orientation from portrait to something else being on home screen won't have any effect. <code>LANDSCAPE</code> or <code>PORTRAIT</code> <code>appium:scaleFactor</code> Simulator scale factor. This is useful to have if the default resolution of simulated device is greater than the actual display resolution. So you can scale the simulator to see the whole device screen without scrolling. Acceptable values for simulators running Xcode SDK 8 and older are: <code>'1.0', '0.75', '0.5', '0.33' and '0.25'</code>, where '1.0' means 100% scale. For simulators running Xcode SDK 9 and above the value could be any valid positive float number. The capability must be of a string type. <code>appium:connectHardwareKeyboard</code> Set this option to <code>true</code> in order to enable hardware keyboard in Simulator. The preference works only when XCUITest driver launches a simulator instance with this value. It is set to <code>false</code> by default, because this helps to workaround some XCTest bugs. <code>connectHardwareKeyboard: true</code> makes <code>forceSimulatorSoftwareKeyboardPresence: false</code> if no explicit value is set for <code>forceSimulatorSoftwareKeyboardPresence</code> capability since Appium 1.22.0. <code>true</code> or <code>false</code> <code>appium:forceSimulatorSoftwareKeyboardPresence</code> Set this option to <code>true</code> in order to turn software keyboard on and turn hardware keyboard off in Simulator since Appium 1.22.0. This option helps to avoid <code>Keyboard is not present</code> error. It is set to <code>true</code> by default. XCUITest driver respects preset simulator software/hardware keyboard preference when this value is <code>false</code>, so <code>connectHardwareKeyboard: false</code> and <code>forceSimulatorSoftwareKeyboardPresence: false</code> means for XCUITest driver to keep the current Simulator keyboard preferences. This option has priority over <code>connectHardwareKeyboard</code>. <code>true</code> or <code>false</code> Deprecated <code>appium:calendarAccessAuthorized</code> This capability is obsolete. Please use <code>appium:permissions</code> one instead with the <code>calendar</code> key. <code>true</code> or <code>false</code> <code>appium:isHeadless</code> Set this capability to <code>true</code> if automated tests are running on Simulator and the device display is not needed to be visible. This only has an effect since Xcode9 and only for simulators. All running instances of Simulator UI are going to be automatically terminated if headless test is started. <code>false</code> is the default value. e.g., <code>true</code> <code>appium:simulatorWindowCenter</code> Allows to explicitly set the coordinates of Simulator window center for Xcode9+ SDK. This capability only has an effect if Simulator window has not been opened yet for the current session before it started. e.g. <code>{-100.0,100.0}</code> or <code>{500,500}</code>, spaces are not allowed <code>appium:simulatorStartupTimeout</code> Allows to change the default timeout for Simulator startup. By default this value is set to 120000ms (2 minutes), although the startup could take longer on a weak hardware or if other concurrent processes use much system resources during the boot up procedure. e.g. <code>300000</code> <code>appium:simulatorTracePointer</code> Whether to highlight pointer moves in the Simulator window. The Simulator UI client must be shut down before the session startup in order for this capability to be applied properly. <code>false</code> by default. e.g. <code>true</code> <code>appium:shutdownOtherSimulators</code> If this capability set to <code>true</code> and the current device under test is an iOS Simulator then Appium will try to shutdown all the other running Simulators before to start a new session. This might be useful while executing webview tests on different devices, since only one device can be debugged remotely at once due to an Apple bug. The capability only has an effect if <code>--relaxed-security</code> command line argument is provided to the server. Defaults to <code>false</code>. e.g. <code>true</code> <code>appium:enforceFreshSimulatorCreation</code> Creates a new simulator in session creation and deletes it in session deletion. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:keepKeyChains</code> Set the capability to <code>true</code> in order to preserve Simulator keychains folder after full reset. This feature has no effect on real devices. Defaults to <code>false</code> e.g. <code>true</code> <code>appium:keychainsExcludePatterns</code> This capability accepts comma-separated path patterns, which are going to be excluded from keychains restore while full reset is being performed on Simulator. It might be useful if you want to exclude only particular keychain types from being restored, like the applications keychain. This feature has no effect on real devices. e.g. <code>*keychain*.db*</code> to exclude applications keychain from being restored <code>appium:reduceMotion</code> It allows to turn on/off reduce motion accessibility preference. Setting reduceMotion <code>on</code> helps to reduce flakiness during tests. Only on simulators e.g <code>true</code> <code>appium:reduceTransparency</code> It allows you to turn on/off reduce transparency accessibility preference. Setting reduceTransparency <code>on</code> helps to reduce screenshot image distortion during tests. Only on simulators e.g <code>true</code> <code>appium:permissions</code> Allows to set permissions for the specified application bundle on Simulator only. The capability value is expected to be a valid JSON string with <code>{\"&lt;bundleId1&gt;\": {\"&lt;serviceName1&gt;\": \"&lt;serviceStatus1&gt;\", ...}, ...}</code> format. Since Xcode SDK 11.4 Apple provides native APIs to interact with application settings. Check the output of <code>xcrun simctl privacy booted</code> command to get the list of available permission names. Use <code>yes</code>, <code>no</code> and <code>unset</code> as values in order to <code>grant</code>, <code>revoke</code> or <code>reset</code> the corresponding permission. Below Xcode SDK 11.4 it is required that <code>applesimutils</code> package is installed and available in PATH. The list of available service names and statuses can be found at https://github.com/wix/AppleSimulatorUtils. e. g. <code>{\"com.apple.mobilecal\": {\"calendar\": \"YES\"}}</code> <code>appium:iosSimulatorLogsPredicate</code> Set the <code>--predicate</code> flag in the ios simulator logs e.g.: <code>'process != \"locationd\" AND process != \"DTServiceHub\"' AND process != \"mobileassetd\"</code> <code>appium:simulatorPasteboardAutomaticSync</code> Handle the <code>-PasteboardAutomaticSync</code> flag when simulator process launches. It could improve launching simulator performance not to sync pasteboard with the system when this value is <code>off</code>. <code>on</code> forces the flag enabled. <code>system</code> does not provide the flag to the launching command. <code>on</code>, <code>off</code>, or <code>system</code> is available. They are case insensitive. Defaults to <code>off</code> e.g. <code>system</code> <code>appium:simulatorDevicesSetPath</code> This capability allows to set an alternative path to the simulator devices set in case you have multiple sets deployed on your local system. Such feature could be useful if you, for example, would like to save disk space on the main system volume. e.g. <code>/MyVolume/Devices</code> <code>appium:webkitResponseTimeout</code> (Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to <code>5000</code> e.g., <code>10000</code> <code>appium:safariGlobalPreferences</code> Allows changing of Mobile Safari's preferences at the session startup. Check the documentation on arguments of mobile: updateSafariPreferences extension to get more details on the value type requirements. { ShowTabBar: 0, WarnAboutFraudulentWebsites: 0 }"},{"location":"capabilities/#web-context","title":"Web Context","text":"Capability Description Values <code>appium:absoluteWebLocations</code> This capability will direct the <code>Get Element Location</code> command, when used within webviews, to return coordinates which are relative to the origin of the page, rather than relative to the current scroll offset. This capability has no effect outside of webviews. Default <code>false</code>. e.g., <code>true</code> <code>appium:safariGarbageCollect</code> Turns on/off Web Inspector garbage collection when executing scripts on Safari. Turning on may improve performance. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:includeSafariInWebviews</code> Add Safari web contexts to the list of contexts available during a native/webview app test. This is useful if the test opens Safari and needs to be able to interact with it. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:safariLogAllCommunication</code> Log all plists sent to and received from the Web Inspector, as plain text. For some operations this can be a lot of data, so it is recommended to be used only when necessary. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:safariLogAllCommunicationHexDump</code> Log all communication sent to and received from the Web Inspector, as raw hex dump and printable characters. This logging is done before any data manipulation, and so can elucidate some communication issues. Like <code>appium:safariLogAllCommunication</code>, this can produce a lot of data in some cases, so it is recommended to be used only when necessary. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:safariSocketChunkSize</code> The size, in bytes, of the data to be sent to the Web Inspector on iOS 11+ real devices. Some devices hang when sending large amounts of data to the Web Inspector, and breaking them into smaller parts can be helpful in those cases. Defaults to <code>16384</code> (also the maximum possible) e.g., <code>1000</code> <code>appium:safariWebInspectorMaxFrameLength</code> The maximum size in bytes of a single data frame for the Web Inspector. Too high values could introduce slowness and/or memory leaks. Too low values could introduce possible buffer overflow exceptions. Defaults to 20MB (<code>20*1024*1024</code>) e.g. <code>1024</code>, <code>100*1024*1024</code> <code>appium:additionalWebviewBundleIds</code> Array (or JSON array) of possible bundle identifiers for webviews. This is sometimes necessary if the Web Inspector is found to be returning a modified bundle identifier for the app. Defaults to <code>[]</code> e.g., <code>['io.appium.modifiedId', 'ABCDEF']</code> <code>appium:webviewConnectTimeout</code> The time to wait, in <code>ms</code>, for the initial presence of webviews in MobileSafari or hybrid apps. Defaults to <code>0</code> e.g., '5000' <code>appium:safariIgnoreWebHostnames</code> Provide a list of hostnames (comma-separated) that the Safari automation tools should ignore. This is to provide a workaround to prevent a webkit bug where the web context is unintentionally changed to a 3rd party website and the test gets stuck. The common culprits are search engines (yahoo, bing, google) and <code>about:blank</code> e.g. <code>'www.yahoo.com, www.bing.com, www.google.com, about:blank'</code> <code>appium:nativeWebTap</code> Enable native, non-javascript-based taps being in web context mode. Defaults to <code>false</code>. Warning: sometimes the preciseness of native taps could be broken, because there is no reliable way to map web element coordinates to native ones. <code>true</code> <code>appium:nativeWebTapStrict</code> Enforce native taps to be done by XCUITest driver rather than WebDriverAgent. Only applicable if <code>nativeWebTap</code> is enabled. <code>false</code> by default <code>false</code> <code>appium:safariInitialUrl</code> Initial safari url, default is a local welcome page. Setting it to an empty string will skip the initial navigation. e.g. <code>https://www.github.com</code> <code>appium:safariAllowPopups</code> (Simulator only) Allow javascript to open new windows in Safari. Default keeps current sim setting. <code>true</code> or <code>false</code> <code>appium:safariIgnoreFraudWarning</code> (Simulator only) Prevent Safari from showing a fraudulent website warning. Default keeps current sim setting. <code>true</code> or <code>false</code> <code>appium:safariOpenLinksInBackground</code> (Simulator only) Whether Safari should allow links to open in new windows. Default keeps current sim setting. <code>true</code> or <code>false</code> <code>appium:webviewConnectRetries</code> Number of times to send connection message to remote debugger, to get webview. Default: <code>8</code> e.g., <code>12</code> <code>appium:webkitResponseTimeout</code> (Real device only) Set the time, in ms, to wait for a response from WebKit in a Safari session. Defaults to <code>5000</code> e.g., <code>10000</code> <code>appium:enableAsyncExecuteFromHttps</code> Capability to allow simulators to execute asynchronous JavaScript on pages using HTTPS. Defaults to <code>false</code> <code>true</code> or <code>false</code> <code>appium:fullContextList</code> Returns the detailed information on contexts for the get available context command. If this capability is enabled, then each item in the returned contexts list would additionally include WebView title, full URL and the bundle identifier. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:enablePerformanceLogging</code> Enable Safari's performance logging (default <code>false</code>) <code>true</code>, <code>false</code> <code>appium:autoWebview</code> Move directly into Webview context if available. Default <code>false</code> <code>true</code>, <code>false</code>"},{"location":"capabilities/#other","title":"Other","text":"Capability Description Values <code>appium:resetOnSessionStartOnly</code> Whether to perform reset on test session finish (<code>false</code>) or not (<code>true</code>). Keeping this variable set to <code>true</code> and Simulator running (the default behaviour since version 1.6.4) may significantly shorten the duration of test session initialization. Either <code>true</code> or <code>false</code>. Defaults to <code>true</code> <code>appium:commandTimeouts</code> Custom timeout(s) in milliseconds for WDA backend commands execution. This might be useful if WDA backend freezes unexpectedly or requires too much time to fail and blocks automated test execution. The value is expected to be of type string and can either contain max milliseconds to wait for each WDA command to be executed before terminating the session forcefully or a valid JSON string, where keys are internal Appium command names (you can find these in logs, look for \"Executing command 'command_name'\" records) and values are timeouts in milliseconds. You can also set the 'default' key to assign the timeout for all other commands not explicitly enumerated as JSON keys. <code>'120000'</code>, <code>'{\"findElement\": 40000, \"findElements\": 40000, \"setValue\": 20000, \"default\": 120000}'</code> <code>appium:useJSONSource</code> Get JSON source from WDA and transform it to XML on the Appium server side. Defaults to <code>false</code>. e.g., <code>true</code> <code>appium:skipLogCapture</code> Skips to start capturing logs such as crash, system, safari console and safari network. It might improve performance such as network. Log related commands will not work. Defaults to <code>false</code>. <code>true</code> or <code>false</code> <code>appium:launchWithIDB</code> Launch WebDriverAgentRunner with idb instead of xcodebuild. This could save a significant amout of time by skiping the xcodebuild process, although the idb might not be very reliable, especially with fresh Xcode SDKs. Check the idb repository for more details on possible compatibility issues. Defaults to <code>false</code> <code>true</code> or <code>false</code> <code>appium:showIOSLog</code> Whether to show any logs captured from a device in the appium logs. Default <code>false</code> <code>true</code> or <code>false</code> <code>appium:clearSystemFiles</code> Whether to clean temporary XCTest files (for example logs) when a testing session is closed. <code>false</code> by default <code>true</code> or <code>false</code> <code>appium:newCommandTimeout</code> How long (in seconds) the driver should wait for a new command from the client before assuming the client has stopped sending requests. After the timeout the session is going to be deleted. <code>60</code> seconds by default. Setting it to zero disables the timer. e.g. <code>100</code>"},{"location":"ci-setup/","title":"CI Setup","text":"<p>Setting up XCUItest driver in an automated environment brings a few challenges with it. Any scenario where user interaction is required must be automated or avoided all together. For real device set up you should first follow the steps in Real Device Configuration tutorial.</p>"},{"location":"ci-setup/#keychains","title":"Keychains","text":"<p>One common such scenario is a prompt asking for a keychain to be unlocked in order to sign the WebDriverAgent. There are multiple possible solutions for this:</p> <ol> <li>Keychains can be set to have no timeout and be unlocked manually once. This can be done using the keychain access application. Sometimes keychains still lock themselves though and this approach is not recommended.</li> <li>It is possible to create a second keychain, which just stores the required certificate to sign the WebDriverAgent. The issue with this approach is, that Codesign wants to unlock all listed keychains regardless of the specified keychain, thus leading to a password prompt. This can be avoided by setting the default keychain and basically hiding the login keychain at the start of building. Stackoverflow article shows how to utelize this approach. Impractical when running other build jobs simultaneously.</li> <li>Stick with the existing keychains as in approach number one, but explicitly call unlock keychain before each build. This can be done using fastlane unlock_keychain or by using security unlock-keychain directly. The password can be saved as a CI variable/secret or on the machine itself.</li> </ol> <p>It is recommended to go with the second or third option. The third one is the easiest and most reliable one to set up at the cost of having to set the keychain password as an environment variable.</p>"},{"location":"ci-setup/#xcode","title":"Xcode","text":"<p>When setting up a new machine as a CI server you are probably going to install Xcode, without executing it once, because you are not going to use it for development. Make sure to start Xcode at least once and do the initial set up and install the suggested extensions for iPhone, watchOS and similar.</p>"},{"location":"ci-setup/#linking-apple-account","title":"Linking Apple Account","text":"<p>This only applies for real device set up. Make sure to link your 'Apple Developer Account' in the machine's system wide \"Account Panel\" when using the \"Basic (automatic) configuration\" described here.</p>"},{"location":"ci-setup/#troubleshooting","title":"Troubleshooting","text":"<p>Enable the <code>appium:showXcodeLog</code> capability and check the appium server output.</p>"},{"location":"device-preparation/","title":"Device Preparation","text":""},{"location":"device-preparation/#automatic-device-preference-update","title":"Automatic device preference update","text":"<p>Appium XCUITest prepares preferences of the device under test automatically. Some of them are also configurable via Appium capabilities and the Settings API.</p>"},{"location":"device-preparation/#keyboards-configuration","title":"Keyboards configuration","text":"<p>Appium configures keyboard preferences by default to make test runs more stable. You can change some of them via the Settings API.</p> <ul> <li>Turn <code>Auto-Correction</code> in Keyboards off</li> <li>Turn <code>Predictive</code> in Keyboards off</li> <li>Mark keyboard tutorial as complete</li> <li>(Only for Simulator) Toggle software keyboard on</li> </ul>"},{"location":"device-preparation/#manual-setup-for-fine-tuning","title":"Manual setup for fine tuning","text":"<p>Automatic configuration availability is limited on iOS, especially for a real device. You may need to manually change the device configuration.</p>"},{"location":"device-preparation/#enable-web-testing-availability","title":"Enable Web testing availability","text":"<p>Please turn on Web Inspector on iOS device via Settings -&gt; Safari -&gt; Advanced</p>"},{"location":"device-preparation/#avoid-possible-wrong-coordinate","title":"Avoid possible wrong coordinate","text":"<p>Please make sure the zoom preference in accessibility is turned off via Settings -&gt; Accessibility -&gt; Zoom. It could cause element coordinates miscalculation.</p>"},{"location":"device-preparation/#expose-more-elements-if-needed","title":"Expose more elements if needed","text":"<p>In some cases, enabling of the below preferences helps to make some view elements accessible. Appium does not modify these settings automatically, since they could affect the way your application under test performs. Please change them manually if needed.</p> <ul> <li>Turn <code>Spoken Content</code> in Settings -&gt; Accessibility on</li> <li>Turn <code>Speak Selection</code> in Settings -&gt; Accessibility on</li> </ul> <p>Note that the available accessibility content depends on the OS version.</p>"},{"location":"element-attributes/","title":"Element Attributes","text":"<p>XCUITest driver supports the following element attributes:</p> Name Description Example name Could contain either element's identifier or its label, depending on which one is available first. Could also be <code>null</code>. It is recommended to prefer the usage of accessibilityIdentifier over accessibilityLabel for automation purposes, since the <code>identifier</code> property is supposed to stay constant under different locales and does not affect accessibility services such as VoiceOver. 'hello' label Element's label value. Could be <code>null</code>. Since XCUITest driver 4.7.3 (WebDriverAgent 4.8.0), the behavior of this value was better aligned with XCTest, so it could include line breaks (<code>\\n</code>). Before this version, line breaks were replaced by spaces. 'hello', 'hello\\nworld' type Element's type name 'XCUIElementTypeButton' visible Whether the element is visible. This value is not available in the \"vanilla\" XCTest and is read directly from the accessibility layer 'false' focused Whether the element is focused. Only available for tvOS prior to driver version 4.25.4 'true' accessible Whether the element is accessible. This value is not available in the \"vanilla\" XCTest and is read directly from the accessibility layer 'true' enabled Whether the element is enabled. 'false' selected Whether the element is selected 'false' index Element's index in the hierarchy relatively to its parent. Only available since Appium 1.20.0. Indexing starts from <code>0</code>. '2' rect Element's rectangle. The actual data of this attribute is based on element's frame. {'x': 0, 'y': 0, 'width': 100, 'height': 100} value Element's value. This is a complex attribute, whose calculation algorithm depends on the actual element type. Check WebDriverAgent sources to know more about how it is compiled (method <code>- (NSString *)wdValue</code>). Could be <code>null</code> 'hello'"},{"location":"endpoints-wda/","title":"Endpoints wda","text":""},{"location":"endpoints-wda/#webdriveragent-jsonwp-endpoints","title":"WebDriverAgent JSONWP Endpoints","text":""},{"location":"endpoints-wda/#session-less-commands","title":"Session-less commands","text":"method endpoint req params opt params POST /wda/homescreen GET /source accessible GET /inspector GET /inspector.js GET /screenshot POST /session desiredCapabilities GET /status GET /* ** POST /* ** PUT /* ** DELETE /* **"},{"location":"endpoints-wda/#session-commands","title":"Session commands","text":"method endpoint req params opt params GET /alert/text POST /alert/accept POST /alert/dismiss POST /wda/deactivateApp duration POST /timeouts * GET /source accessible GET /element/:uuid/enabled GET /element/:uuid/rect GET /element/:uuid/attribute/:name GET /element/:uuid/text GET /element/:uuid/displayed GET /wda/element/:uuid/accessible GET /element/:uuid/name POST /element/:uuid/value value POST /element/:uuid/click POST /element/:uuid/clear POST /wda/element/:uuid/doubleTap POST /wda/element/:uuid/touchAndHold duration POST /wda/element/:uuid/scroll name, direction, predicateString, toVisible POST /uiaElement/:uuid/value value POST /wda/element/:uuid/dragfromtoforduration fromX, fromY, toX, toY, duration POST /wda/tap/:uuid x, y POST /wda/keys value GET /window/size POST /element using, value POST /elements using, value GET /wda/uiaElement/:uuid/getVisibleCells POST /element/:uuid/element using, value POST /element/:uuid/elements using, value GET /orientation POST /orientation orientation GET /screenshot POST /wda/touch_id match <p>* implemented but intentionally not supported</p> <p>** not implemented handlers</p>"},{"location":"endpoints/","title":"Endpoints","text":""},{"location":"endpoints/#appium-ios-jsonwp-endpoints","title":"Appium iOS JSONWP Endpoints","text":""},{"location":"endpoints/#session-less-commands","title":"Session-less commands","text":"method endpoint req params opt params GET /status POST /session desiredCapabilities requiredCapabilities GET /sessions"},{"location":"endpoints/#session-commands","title":"Session commands","text":"method endpoint req params opt params GET /:sessionId DELETE /:sessionId POST /timeouts type, ms POST /timeouts/async_script ms POST /timeouts/implicit_wait ms GET /window_handle GET /window_handles GET /url POST /url url POST /forward none POST /back none POST /refresh none POST /execute script, args POST /execute_async script, args GET /screenshot POST /frame id POST /window name DELETE /window GET /window/:windowhandle/size GET /cookie POST /cookie cookie DELETE /cookie DELETE /cookie/:name GET /source GET /title POST /element using, value POST /elements using, value POST /element/active none POST /element/:elementId/element using, value POST /element/:elementId/elements using, value POST /element/:elementId/click none POST /element/:elementId/submit none GET /element/:elementId/text none POST /element/:elementId/value value POST /keys value GET /element/:elementId/name POST /element/:elementId/clear none GET /element/:elementId/selected GET /element/:elementId/enabled GET /element/:elementId/attribute/:name GET /element/:elementId/equals/:otherId GET /element/:elementId/displayed GET /element/:elementId/location GET /element/:elementId/location_in_view GET /element/:elementId/size GET /element/:elementId/css/:propertyName GET /orientation POST /orientation orientation GET /alert_text POST /alert_text text POST /accept_alert none POST /dismiss_alert none POST /moveto element, xoffset, yoffset POST /click button POST /touch/click element POST /touch/flick element, xspeed, yspeed, xoffset, yoffset, speed GET /location POST /location location POST /log type GET /log/types GET /context POST /context name GET /contexts POST /touch/perform actions POST /touch/multi/perform actions elementId POST /receive_async_response status, value"},{"location":"endpoints/#appium-specific-commands","title":"Appium-specific commands","text":"method endpoint req params opt params POST /appium/device/shake none GET /appium/device/system_time POST /appium/device/lock seconds POST /appium/device/rotate x, y, radius, rotation, touchCount, duration element POST /appium/device/remove_app appId or bundleId POST /appium/device/hide_keyboard strategy, key, keyCode, keyName POST /appium/device/push_file path, data POST /appium/device/pull_file path POST /appium/device/pull_folder path POST /appium/simulator/touch_id match POST /appium/app/launch none POST /appium/app/close none POST /appium/app/background seconds POST /appium/app/strings language, stringFile POST /appium/element/:elementId/value value POST /appium/receive_async_response response"},{"location":"execute-methods/","title":"Execute Methods","text":"<p>Beside of standard W3C APIs the driver provides the following custom command extensions to execute platform specific scenarios:</p>"},{"location":"execute-methods/#mobile-selectpickerwheelvalue","title":"mobile: selectPickerWheelValue","text":"<p>Performs selection of the next or previous picker wheel value. This might be useful if these values are populated dynamically, so you don't know which one to select or value selection suing <code>sendKeys</code> API does not work because of an XCTest bug. The method throws an exception if it fails to change the current picker value.</p>"},{"location":"execute-methods/#arguments","title":"Arguments","text":"Name Type Required Description Example elementId (<code>element</code> before version 1.22) string yes PickerWheel's internal element id (as hexadecimal hash string) to perform value selection on. The element must be of type XCUIElementTypePickerWheel abcdef12-1111-2222-3333-444444 order string yes Either <code>next</code> to select the value next to the current one from the target picker wheel or <code>previous</code> to select the previous one. next offset number no The value in range [0.01, 0.5]. It defines how far from picker wheel's center the click should happen. The actual distance is calculated by multiplying this value to the actual picker wheel height. Too small offset value may not change the picker wheel value and too high value may cause the wheel to switch two or more values at once. Usually the optimal value is located in range [0.15, 0.3]. <code>0.2</code> by default 0.15 value string no If provided WDA will try to automatically scroll in the given direction until the actual picker value reaches the expected one or the amount of scrolling attempts is exceeded. myvalue maxAttempts number no The maximum number of scrolling attempts to reach <code>value</code> before an error will be thrown. Only makes sense in combination with <code>value</code>. 25 by default 50"},{"location":"execute-methods/#mobile-alert","title":"mobile: alert","text":"<p>Tries to apply the given action to the currently visible alert.</p>"},{"location":"execute-methods/#arguments_1","title":"Arguments","text":"Name Type Required Description Example action string yes The actual action to apply. Could be either: <code>accept</code>, <code>dismiss</code> or <code>getButtons</code> accept buttonLabel string no The name of the button used to perform the chosen alert action. Only makes sense if the action is <code>accept</code> or <code>dismiss</code> Accept"},{"location":"execute-methods/#returned-result","title":"Returned Result","text":"<p>The list of alert button names if the selected action is <code>getButtons</code></p>"},{"location":"execute-methods/#mobile-setpasteboard","title":"mobile: setPasteboard","text":"<p>Sets the Simulator's pasteboard content to the given value. Does not work for real devices.</p>"},{"location":"execute-methods/#arguments_2","title":"Arguments","text":"Name Type Required Description Example content string yes The content to set hello encoding string no The content's encoding. <code>utf8</code> by default ascii"},{"location":"execute-methods/#mobile-getpasteboard","title":"mobile: getPasteboard","text":"<p>Gets the Simulator's pasteboard content. Does not work for real devices.</p>"},{"location":"execute-methods/#arguments_3","title":"Arguments","text":"Name Type Required Description Example encoding string no The expected encoding of the returned string. <code>utf8</code> by default ascii"},{"location":"execute-methods/#returned-result_1","title":"Returned Result","text":"<p>The pasteboard content string.</p>"},{"location":"execute-methods/#mobile-source","title":"mobile: source","text":"<p>Allows to retrieve the source tree of the current page in different representation formats.</p>"},{"location":"execute-methods/#arguments_4","title":"Arguments","text":"Name Type Required Description Example format string yes One of possible page tree source representation formats: <code>xml</code> (the default value), <code>description</code> and <code>json</code>. The <code>xml</code> format generates the output similar to what <code>getPageSource</code> standard API returns. <code>description</code> representation is how XCTest \"sees\" the page internally and is the same string as debugDescription API would return for the root application element. This source representation format is useful for debugging purposes and is the fastest one to fetch. <code>json</code> representation is similar to <code>xml</code>, but the tree hierarchy there is represented as JSON elements tree rather than as XML nodes. description excludedAttributes string no One or more comma-separated attribute names to be excluded from the XML output, thus only makes sense if <code>format</code> is set to <code>xml</code>. It might be sometimes helpful to exclude, for example, the <code>visible</code> attribute, to significantly speed-up page source retrieval. visible,accessible"},{"location":"execute-methods/#returned-result_2","title":"Returned Result","text":"<p>The page source tree formatted according to the given format argument.</p>"},{"location":"execute-methods/#mobile-getcontexts","title":"mobile: getContexts","text":"<p>Retrieves the list of available contexts including the extended context information, like urls and page names. This is different from the standard <code>getContexts</code> API, because the latter only has web view names without any additional information. In situation where multiple web views are available at once the client code would have to connect to each of them in order to detect the one, which needs to be interacted with. Although, this extra effort is not needed with the information provided by this extension.</p>"},{"location":"execute-methods/#arguments_5","title":"Arguments","text":"Name Type Required Description Example waitForWebviewMs number no Tells Appium for how long (in milliseconds) to wait for web view(s) to appear. <code>5000</code>ms by default 10000"},{"location":"execute-methods/#returned-result_3","title":"Returned Result","text":"<p>The list of available context objects along with their properties:</p> <ul> <li>id: The identifier of the context. The native context will be 'NATIVE_APP' and the webviews will be 'WEBVIEW_xxx'</li> <li>title: The title associated with the webview content. Could be <code>null</code></li> <li>url: The url associated with the webview content. Could be <code>null</code></li> </ul>"},{"location":"execute-methods/#mobile-installapp","title":"mobile: installApp","text":"<p>Installs the given application to the device under test. Make sure the app is built for a correct architecture and is signed with a proper developer signature (for real devices) prior to install it.</p>"},{"location":"execute-methods/#arguments_6","title":"Arguments","text":"Name Type Required Description Example app string yes See the description of the <code>appium:app</code> capability /path/to/my.app timeoutMs number no The maximum time to wait until app install is finished in milliseconds on real devices. If not provided then the value of <code>appium:appPushTimeout</code> capability is used. If the capability is not provided then equals to 240000ms 500000 strategy string no One of possible app installation strategies on real devices. This argument is ignored on simulators. If not provided then the value of <code>appium:appInstallStrategy</code> is used. If the latter is also not provided then <code>serial</code> is used. See the description of <code>appium:appInstallStrategy</code> capability for more details on available values. parallel"},{"location":"execute-methods/#mobile-isappinstalled","title":"mobile: isAppInstalled","text":"<p>Checks whether the given application is installed on the device under test.</p>"},{"location":"execute-methods/#arguments_7","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be checked com.mycompany.myapp"},{"location":"execute-methods/#returned-result_4","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code></p>"},{"location":"execute-methods/#mobile-removeapp","title":"mobile: removeApp","text":"<p>Removes the given application from the device under test.</p>"},{"location":"execute-methods/#arguments_8","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be removed com.mycompany.myapp"},{"location":"execute-methods/#returned-result_5","title":"Returned Result","text":"<p>Either <code>true</code> if the app was successfully uninstalled, otherwise <code>false</code></p>"},{"location":"execute-methods/#mobile-launchapp","title":"mobile: launchApp","text":"<p>Executes the given app on the device under test. If the app is already running then it would be activated. If the app is not installed or cannot be launched then an exception is thrown.</p>"},{"location":"execute-methods/#arguments_9","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be launched com.mycompany.myapp arguments string|array no One or more command line arguments for the app. If the app is already running then this argument is ignored. ['-s', '-m'] environment dict no Environment variables mapping for the app. If the app is already running then this argument is ignored. {'var': 'value'}"},{"location":"execute-methods/#mobile-terminateapp","title":"mobile: terminateApp","text":"<p>Terminates the given app on the device under test via XCTest's terminate API. If the app is not installed an exception is thrown. If the app is not running then nothing is done.</p>"},{"location":"execute-methods/#arguments_10","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be terminated com.mycompany.myapp"},{"location":"execute-methods/#returned-result_6","title":"Returned Result","text":"<p>Either <code>true</code> if the app was successfully terminated, otherwise <code>false</code></p>"},{"location":"execute-methods/#mobile-killapp","title":"mobile: killApp","text":"<p>Kill the given app on the real device under test by instruments service. If the app is not running or failed to kill, then nothing is done.</p> <p>XCUITest driver 4.4 and higher does not require py-ios-device. XCUITest driver 4.3 requires py-ios-device.</p>"},{"location":"execute-methods/#arguments_11","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be terminated com.mycompany.myapp"},{"location":"execute-methods/#returned-result_7","title":"Returned Result","text":"<p>Either <code>true</code> if the app was successfully killed, otherwise <code>false</code></p>"},{"location":"execute-methods/#mobile-queryappstate","title":"mobile: queryAppState","text":"<p>Queries the state of an installed application from the device under test. An exception will be thrown if the app with given identifier is not installed.</p>"},{"location":"execute-methods/#arguments_12","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be queried com.mycompany.myapp"},{"location":"execute-methods/#returned-result_8","title":"Returned Result","text":"<p>An integer number is returned, which encodes the application state. Possible values are described in XCUIApplicationState XCTest documentation topic.</p>"},{"location":"execute-methods/#mobile-activateapp","title":"mobile: activateApp","text":"<p>Puts the given application to foreground if it is running in the background. An error is thrown if the app is not installed or is not running. Nothing is done if the app is already running in the foreground.</p>"},{"location":"execute-methods/#arguments_13","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the application to be activated com.mycompany.myapp"},{"location":"execute-methods/#mobile-listapps","title":"mobile: listApps","text":"<p>List applications installed on the real device under test. This extension throws an error if called for a Simulator device.</p>"},{"location":"execute-methods/#arguments_14","title":"Arguments","text":"Name Type Required Description Example applicationType string no The type of applications to list. Either <code>System</code> or <code>User</code> (the default one) System"},{"location":"execute-methods/#returned-result_9","title":"Returned Result","text":"<p>A list of apps, where each item is a map where keys are bundle identifiers and values are maps of platform-specific app properties. Having <code>UIFileSharingEnabled</code> set to <code>true</code> in the app properties map means this app supports files upload and download into its <code>documents</code> container. Read Pushing/Pulling files for more details.</p>"},{"location":"execute-methods/#mobile-startperfrecord","title":"mobile: startPerfRecord","text":"<p>Starts performance profiling for the device under test. Relaxing security is mandatory for simulators. It can always work for real devices. Since XCode 12 the method tries to use <code>xctrace</code> tool to record performance stats. The <code>instruments</code> developer utility is used as a fallback for this purpose if <code>xctrace</code> is not available. It is possible to record multiple profiles at the same time. Read Instruments User Guide for more details. If the recording for the given profile is already running then nothing is done.</p>"},{"location":"execute-methods/#arguments_15","title":"Arguments","text":"Name Type Required Description Example timeout number no The maximum count of milliseconds to record the profiling information. It is recommended to always limit the maximum duration of perf record operation, since the resulting logs are pretty huge and may easily exceed the free space on th local storage volume. <code>300000</code>ms by default (5 minutes) <code>600000</code> profileName string no The name of existing performance profile to apply. Can also contain the full path to the chosen template on the server file system. Note, that not all profiles are supported on mobile devices. <code>Activity Monitor</code> by default. <code>Time Profile</code> pid string or number no The ID of the process to measure the performance for. Set it to <code>current</code> in order to measure the performance of the process, which belongs to the currently active application. All processes running on the device are measured if pid is unset (the default setting). current"},{"location":"execute-methods/#mobile-stopperfrecord","title":"mobile: stopPerfRecord","text":"<p>Stops the performance recording operation previosuly started by <code>mobile: startPerfRecord</code> call. If the previous call has already been completed due to the timeout then its result is returned immediately. An error is thrown if the performance recording has failed to start and recorded no data.</p>"},{"location":"execute-methods/#arguments_16","title":"Arguments","text":"Name Type Required Description Example profileName string no The name of existing performance profile to stop the recording for. Multiple recorders for different profile names could be executed at the same time. <code>Activity Monitor</code> by default. <code>Time Profile</code> remotePath string no The path to the remote location, where the resulting zipped .trace file should be uploaded. The following protocols are supported: http/https, ftp Null or empty string value (the default setting) means the content of resulting file should be zipped, encoded as Base64 and passed as the endpoint response value. An exception will be thrown if the generated file is too big to fit into the available process memory. https://myserver/upload user string no The name of the user for the remote authentication. Only works if <code>remotePath</code> is provided. myuser pass string no The password for the remote authentication. Only works if <code>remotePath</code> is provided. mypassword method string no The http multipart upload method name. Only works if <code>remotePath</code> is provided. <code>PUT</code> by default POST headers dict no Additional headers mapping for multipart http(s) uploads {'User-Agent': 'Myserver 1.0'} fileFieldName string no The name of the form field, where the file content BLOB should be stored for http(s) uploads. <code>file</code> by default payload formFields dict or array no Additional form fields for multipart http(s) uploads {'field2': 'value2'}"},{"location":"execute-methods/#returned-result_10","title":"Returned Result","text":"<p>The resulting file in .trace format can be either returned directly as base64-encoded zip archive or uploaded to a remote location (such files could be pretty large), depending on the <code>remotePath</code> argument value. Afterwards it is possible to unarchive and open such file with Xcode Developer Tools.</p>"},{"location":"execute-methods/#mobile-installcertificate","title":"mobile: installCertificate","text":"<p>Installs a custom certificate onto the device. Since Xcode SDK 11.4 Apple has added a dedicated simctl subcommand to quickly handle certificates on Simulator over CLI. On real devices the certificate could be installed via CLI if py-ios-device tool is available on the server machine. On simulators before Xcode 11.4 SDK Apple provides no official way to do it via the command line. In such case (and also as a fallback if CLI setup fails) this method tries to wrap the certificate into .mobileconfig format and then deploys the wrapped file to the internal HTTP server, so one can open it via mobile Safari. Then the algorithm goes through the profile installation procedure by clicking the necessary buttons using WebDriverAgent.</p>"},{"location":"execute-methods/#arguments_17","title":"Arguments","text":"Name Type Required Description Example content string yes Base64-encoded content of the public certificate in PEM format a23234... commonName string no Common name of the certificate. If this is not set then the script will try to parse it from the given certificate content. com.myorg isRoot boolean no This option defines where the certificate should be installed to: either Trusted Root Store (<code>true</code>, the default option) or the Keychain (<code>false</code>). On environments other than Xcode 11.4+ Simulator this option is ignored. false"},{"location":"execute-methods/#returned-result_11","title":"Returned Result","text":"<p>The content of the generated .mobileconfig file as base64-encoded string. This config might be useful for debugging purposes. If the certificate has been successfully set via CLI then nothing is returned.</p>"},{"location":"execute-methods/#mobile-removecertificate","title":"mobile: removeCertificate","text":"<p>Removes installed certificate for real devices only if py-ios-device tool is available on the server machine since driver version 4.19.2.</p>"},{"location":"execute-methods/#arguments_18","title":"Arguments","text":"Name Type Required Description Example name string yes Name of the profile com.orgname.profile.mdmprofile"},{"location":"execute-methods/#returned-result_12","title":"Returned Result","text":"<p>Returns status acknowledgment <code>{'Status': 'Acknowledged'}</code> if successfully removed certificate or <code>None</code> if unable to remove certificate.</p>"},{"location":"execute-methods/#mobile-listcertificates","title":"mobile: listCertificates","text":"<p>Lists installed certificates for real devices only if py-ios-device tool is available on the server machine since driver version 4.10.0.</p>"},{"location":"execute-methods/#returned-result_13","title":"Returned Result","text":"<p>Returns map of certificates installed on the real device. The response looks like:</p> <pre><code>{\n'OrderedIdentifiers': ['com.orgname.profile.mdmprofile'],\n'ProfileManifest': {\n'com.orgname.profile.mdmprofile': {\n'Description': 'MDM Profile',\n'IsActive': True\n}\n},\n'ProfileMetadata': {\n'com.orgname.profile.mdmprofile': {\n'PayloadDescription': 'MDM Profile for testing,\n'PayloadDisplayName': 'MDM Profile',\n'PayloadOrganization': 'My Org, Inc.',\n'PayloadRemovalDisallowed': False,\n'PayloadUUID': '9ab3fa27-cc45-4c23-a94a-714686397a86',\n'PayloadVersion': 1\n}\n},\n'Status': 'Acknowledged'\n}\n</code></pre>"},{"location":"execute-methods/#mobile-startlogsbroadcast","title":"mobile: startLogsBroadcast","text":"<p>Starts iOS system logs broadcast websocket on the same host and port where Appium server is running at <code>/ws/session/:sessionId:/appium/syslog</code> endpoint. The method will return immediately if the web socket is already listening. Each connected webcoket listener will receive syslog lines as soon as they are visible to Appium. Read Using Mobile Execution Commands to Continuously Stream Device Logs with Appium Appium Pro article for more details on this feature.</p>"},{"location":"execute-methods/#mobile-stoplogsbroadcast","title":"mobile: stopLogsBroadcast","text":"<p>Stops the syslog broadcasting wesocket server previously started by <code>mobile: startLogsBroadcast</code>. This method will return immediately if no server is running.</p>"},{"location":"execute-methods/#mobile-batteryinfo","title":"mobile: batteryInfo","text":"<p>Reads the battery information from the device under test. This endpoint only returns reliable result on real devices.</p>"},{"location":"execute-methods/#returned-result_14","title":"Returned Result","text":"<p>The actual battery info map, which consists of the following entries:</p> <ul> <li>level: Battery level in range [0.0, 1.0], where 1.0 means 100% charge.</li> <li>state: Battery state as an integer number. The following values are possible:</li> <li>UIDeviceBatteryStateUnknown = 0</li> <li>UIDeviceBatteryStateUnplugged = 1  // on battery, discharging</li> <li>UIDeviceBatteryStateCharging = 2   // plugged in, less than 100%</li> <li>UIDeviceBatteryStateFull = 3       // plugged in, at 100%</li> </ul>"},{"location":"execute-methods/#mobile-deviceinfo","title":"mobile: deviceInfo","text":"<p>Returns the miscellaneous information about the device under test. It includes device information via lockdown in a real device since XCUITest driver 4.2.0.</p>"},{"location":"execute-methods/#returned-result_15","title":"Returned Result","text":"<p>Check the <code>+ (id&lt;FBResponsePayload&gt;)handleGetDeviceInfo:(FBRouteRequest *)request</code> method in FBCustomCommands.m for more details on the available map entries.</p>"},{"location":"execute-methods/#mobile-getdevicetime","title":"mobile: getDeviceTime","text":"<p>Returns the actual device time.</p>"},{"location":"execute-methods/#arguments_19","title":"Arguments","text":"Name Type Required Description Example format string no The format specifier string. Read MomentJS documentation to get the full list of supported datetime format specifiers. The default format is <code>YYYY-MM-DDTHH:mm:ssZ</code>, which complies to ISO-8601 YYYY-MM-DD HHss"},{"location":"execute-methods/#returned-result_16","title":"Returned Result","text":"<p>The retrieved datetime string formatted according to the given format specfier.</p>"},{"location":"execute-methods/#mobile-activeappinfo","title":"mobile: activeAppInfo","text":"<p>Returns information about the active application.</p>"},{"location":"execute-methods/#returned-result_17","title":"Returned Result","text":"<p>Check the <code>+ (id&lt;FBResponsePayload&gt;)handleActiveAppInfo:(FBRouteRequest *)request</code> method in FBCustomCommands.m for more details on the available map entries.</p>"},{"location":"execute-methods/#mobile-pressbutton","title":"mobile: pressButton","text":"<p>Emulates press action on the given physical device button. iOS is pressButton:, tvOS is pressButton: or pressButton:forDuration:. mobile: performIoHidEvent calls a more universal API to perform press with duration on any supported device.</p>"},{"location":"execute-methods/#arguments_20","title":"Arguments","text":"Name Type Required Description Example name string yes The name of the button to be pressed. Supported button names for iOS-based devices are (case-insensitive): <code>home</code>, <code>volumeup</code>, <code>volumedown</code>. For tvOS-based devices (case-insensitive): <code>home</code>, <code>up</code>, <code>down</code>, <code>left</code>, <code>right</code>, <code>menu</code>, <code>playpause</code>, <code>select</code> home durationSeconds number no Duration in float seconds for tvOS-based devices since Appium 1.22.0 10"},{"location":"execute-methods/#mobile-pushnotification","title":"mobile: pushNotification","text":"<p>Simulates push notification delivery to Simulator. Only application remote push notifications are supported. VoIP, Complication, File Provider, and other types are not supported. Check the output of <code>xcrun simctl help push</code> command for more details.</p>"},{"location":"execute-methods/#arguments_21","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the target application com.apple.Preferences payload map yes Valid Apple Push Notification values. Read the <code>Create the JSON Payload</code> topic of the official Apple documentation for more details on the payload creation. <code>{\"aps\": {\"alert\": {\"title\": \"This is a simulated notification!\"}, \"badge\": 3, \"sound\": \"default\"} }</code>"},{"location":"execute-methods/#mobile-expectnotification","title":"mobile: expectNotification","text":"<p>Blocks until the expected notification is delivered. It is a thin wrapper over XCTNSNotificationExpectation and XCTDarwinNotificationExpectation entities. The extension call throws TimeoutError if the expected notification has not been delivered within the given timeout.</p>"},{"location":"execute-methods/#arguments_22","title":"Arguments","text":"Name Type Required Description Example name string yes The name of the notification to expect com.example.fooAllDone type string no Which notification type to expect. Either <code>plain</code> (the default value) to wait for a notification from the default notification center or <code>darwin</code> to wait for a system notification. darwin timeoutSeconds number no For how long to wait until the notification is delivered in float seconds. 60 seconds by default 5.5"},{"location":"execute-methods/#mobile-performiohidevent","title":"mobile: performIoHidEvent","text":"<p>Emulates triggering of the given low-level IO HID device event. Constants for possible events are defined in HID Usage Tables. For example, in order to emulate single press on Home button the extension should be called with the following arguments: - page: <code>0x0C</code> (<code>kHIDPage_Consumer</code>, select the <code>Customer</code> page) - usage: <code>0x40</code> (<code>kHIDUsage_Csmr_Menu</code>, the <code>Csmr</code> prefix here means this usage is dedicated to the <code>Customer</code> page) - durationSeconds: <code>0.005</code> (The event duration should be 5 milliseconds to be recognized as a single press by iOS)</p> <p>Some popular constants:</p> Name Value Description kHIDPage_Consumer 0x0C The page containing all usages prefixed with <code>kHIDUsage_Csmr_</code> kHIDUsage_Csmr_VolumeIncrement 0xE9 Volume Up kHIDUsage_Csmr_VolumeDecrement 0xEA Volume Down kHIDUsage_Csmr_Menu 0x40 Home kHIDUsage_Csmr_Power 0x30 Power/Lock kHIDUsage_Csmr_Snapshot 0x65 Power + Home"},{"location":"execute-methods/#arguments_23","title":"Arguments","text":"Name Type Required Description Example page int yes The event page identifier. Look for constants perfixed with <code>kHIDPage_</code> in the table above 0x0C usage int yes The event usage identifier (usages are defined per-page). Look for constants prefixed with <code>kHIDUsage_</code> in the table above 0x40 durationSeconds number yes The event duration in float seconds. XCTest uses <code>0.005</code> for a single press event duration 2.5"},{"location":"execute-methods/#mobile-enrollbiometric","title":"mobile: enrollBiometric","text":"<p>Enrolls biometric authentication on Simulator.</p>"},{"location":"execute-methods/#arguments_24","title":"Arguments","text":"Name Type Required Description Example isEnabled boolean no Whether to enable/disable biometric enrollment. <code>true</code> by default. true"},{"location":"execute-methods/#mobile-sendbiometricmatch","title":"mobile: sendBiometricMatch","text":"<p>Emulates biometric match/non-match event on Simulator. The biometric feature is expected to be already enrolled before executing that.</p>"},{"location":"execute-methods/#arguments_25","title":"Arguments","text":"Name Type Required Description Example type string no The biometric feature name. Either <code>touchId</code> or <code>faceId</code>. <code>touchId</code> by default. faceId match boolean no Whether to simulate biometric match (<code>true</code>, the default value) or non-match (<code>false</code>). true"},{"location":"execute-methods/#mobile-isbiometricenrolled","title":"mobile: isBiometricEnrolled","text":"<p>Checks whether biometric is currently enrolled or not on a Simulator device.</p>"},{"location":"execute-methods/#returned-result_18","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code></p>"},{"location":"execute-methods/#mobile-clearkeychains","title":"mobile: clearKeychains","text":"<p>Clears keychains on Simulator. An exception is thrown for real devices.</p>"},{"location":"execute-methods/#mobile-getpermission","title":"mobile: getPermission","text":"<p>Gets application permission state on Simulator. This method requires WIX applesimutils to be installed on the host where Appium server is running.</p>"},{"location":"execute-methods/#arguments_26","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the destination app. com.mycompany.myapp service string yes One of available service names. The following services are supported: <code>calendar</code>, <code>camera</code>, <code>contacts</code>, <code>homekit</code>, <code>microphone</code>, <code>photos</code>, <code>reminders</code>, <code>medialibrary</code>, <code>motion</code>, <code>health</code>, <code>siri</code>, <code>speech</code>. true"},{"location":"execute-methods/#returned-result_19","title":"Returned Result","text":"<p>Either 'yes', 'no', 'unset' or 'limited'</p>"},{"location":"execute-methods/#mobile-setpermission","title":"mobile: setPermission","text":"<p>Set application permission state on Simulator. This method requires WIX applesimutils to be installed on the host where Appium server is running.</p>"},{"location":"execute-methods/#arguments_27","title":"Arguments","text":"Name Type Required Description Example bundleId string yes The bundle identifier of the destination app. com.mycompany.myapp access map yes One or more access rules to set. The following keys are supported: <code>all</code> (Apply the action to all services), <code>calendar</code> (Allow access to calendar), <code>contacts-limited</code> (Allow access to basic contact info), <code>contacts</code> (Allow access to full contact details), <code>location</code> (Allow access to location services when app is in use), <code>location-always</code> (Allow access to location services at all times), <code>photos-add</code> (Allow adding photos to the photo library), <code>photos</code> (Allow full access to the photo library), <code>media-library</code> (Allow access to the media library), <code>microphone</code> (Allow access to audio input), <code>motion</code> (Allow access to motion and fitness data), <code>reminders</code> (Allow access to reminders), <code>siri</code> (Allow use of the app with Siri.). The following values are supported: <code>yes</code> (To grant the permission), <code>no</code> (To revoke the permission), <code>unset</code> (To reset the permission) {'all': 'yes'}"},{"location":"execute-methods/#mobile-resetpermission","title":"mobile: resetPermission","text":"<p>Resets the given permission for the active application under test. Works for both Simulator and real devices using Xcode SDK 11.4+</p>"},{"location":"execute-methods/#arguments_28","title":"Arguments","text":"Name Type Required Description Example service string or int yes One of available service names. The supported service names are: <code>calendar</code>, <code>camera</code>, <code>contacts</code>, <code>health</code>, <code>homekit</code>, <code>keyboardnet</code>, <code>location</code>, <code>medialibrary</code>, <code>microphone</code>, <code>photos</code>, <code>reminders</code>, <code>systemroot</code>, <code>userdesktop</code>, <code>userdocuments</code>, <code>userdownloads</code>, <code>bluetooth</code>. This could also be an integer protected resource identifier taken from XCUIProtectedResource photos"},{"location":"execute-methods/#mobile-getappearance","title":"mobile: getAppearance","text":"<p>Get the device's UI appearance style.</p>"},{"location":"execute-methods/#returned-result_20","title":"Returned Result","text":"<p>An object, with the following entries: - style: The device's UI appearance value. This could be one of: <code>light</code>, <code>dark</code>, <code>unknown</code>, <code>unsupported</code></p>"},{"location":"execute-methods/#mobile-setappearance","title":"mobile: setAppearance","text":"<p>Set the device's UI appearance style.</p>"},{"location":"execute-methods/#arguments_29","title":"Arguments","text":"Name Type Required Description Example style string yes Either <code>light</code> or <code>dark</code> dark"},{"location":"execute-methods/#mobile-siricommand","title":"mobile: siriCommand","text":"<p>Presents the Siri UI, if it is not currently active, and accepts a string which is then processed as if it were recognized speech. Check the documentation on activateWithVoiceRecognitionText XCTest method for more details.</p>"},{"location":"execute-methods/#arguments_30","title":"Arguments","text":"Name Type Required Description Example text string yes The actual command that will be passed to Siri service Hello Siri"},{"location":"execute-methods/#mobile-pullfile","title":"mobile: pullFile","text":"<p>Pulls a remote file from the device.</p>"},{"location":"execute-methods/#arguments_31","title":"Arguments","text":"Name Type Required Description Example remotePath string yes The path to an existing remote file on the device. This variable can be prefixed with bundle id, so then the file will be pulled from the corresponding application container instead of the default media folder. Use <code>@&lt;app_bundle_id&gt;:&lt;optional_container_type&gt;/&lt;path_to_the_file_or_folder_inside_container&gt;</code> format to pull a file from an application container of the given type. The only supported container type for real devices is <code>documents</code>. You could use listApps extension to check whether this container is available for the particluar app. Containers available for Simulators: <code>app</code>, <code>data</code>, <code>groups</code>, <code>&lt;A specific App Group container&gt;</code>. Eventually the whole Simulator file system is available directly from Finder, so you may pull any file from there by providing a path to it relatively to Simulator's file system root. If the file with the given name does not exist an exception will be thrown. @com.mycompany.myapp:documents/myfile.txt"},{"location":"execute-methods/#returned-result_21","title":"Returned Result","text":"<p>Base64-encoded string, which represents the content of the remote file.</p>"},{"location":"execute-methods/#mobile-pushfile","title":"mobile: pushFile","text":"<p>Pushes a local file to the device.</p>"},{"location":"execute-methods/#arguments_32","title":"Arguments","text":"Name Type Required Description Example remotePath string yes The path on the device to where the payload should be written. The value format is similar to the one used in pullFile extension. If the file with the same name already exists then it will be silently overridden. @com.mycompany.myapp:documents/myfile.txt payload string yes Base64-encoded content of the file to be pushed. QXBwaXVt"},{"location":"execute-methods/#mobile-pullfolder","title":"mobile: pullFolder","text":"<p>Pulls a remote folder from the device.</p>"},{"location":"execute-methods/#arguments_33","title":"Arguments","text":"Name Type Required Description Example remotePath string yes Same as for pullFile extension, but should be pointing to a remote folder @com.mycompany.myapp:documents/myfolder/"},{"location":"execute-methods/#returned-result_22","title":"Returned Result","text":"<p>Base64-encoded string, which represents the zipped content of the remote folder.</p>"},{"location":"execute-methods/#mobile-deletefile","title":"mobile: deleteFile","text":"<p>Deletes the given file from the device under test.</p>"},{"location":"execute-methods/#arguments_34","title":"Arguments","text":"Name Type Required Description Example remotePath string yes Same as for pullFile extension @com.mycompany.myapp:documents/myfile.txt"},{"location":"execute-methods/#mobile-deletefolder","title":"mobile: deleteFolder","text":"<p>Deletes the given folder from the device under test.</p>"},{"location":"execute-methods/#arguments_35","title":"Arguments","text":"Name Type Required Description Example remotePath string yes Same value as for <code>mobile: deleteFile</code> except of the fact it should be pointing to a folder and should end with a single slash <code>/</code> @com.mycompany.myapp:documents/myfolder/"},{"location":"execute-methods/#mobile-configurelocalization","title":"mobile: configureLocalization","text":"<p>Change localization settings on the currently booted Simulator. The changed settings are only applied for the newly started applications/activities. Currently running applications will stay unchanged. This means, for example, that the keyboard should be hidden and shown again in order to observe the changed layout, and curresponding apps must be restarted in order to observe their interface using the newly set locale/language. Be careful while setting the actual arguments since their actual values are not strictly checked. This could lead to an unexpected behavior if an incorrect/unsupported language or locale abbreviation is provided.</p>"},{"location":"execute-methods/#arguments_36","title":"Arguments","text":"Name Type Required Description Example keyboard map no On-screen keyboard properties. The <code>name</code> key is required and should be set to a valid locale abbreviation. The <code>layout</code> key is also required. The <code>hardware</code> key is optional and could be omitted or set to <code>Automated</code>. You could switch the keyboard layout in system preferences of your booted simulator, run <code>xcrun simctl spawn booted defaults read .GlobalPreferences.plist</code>, and inspect the value of <code>AppleKeyboards</code> to see possible combinations. <code>{\"name\": \"de_CH\", \"layout\": \"QWERTZ\", \"hardware\": \"Automated\"}</code> language map no System language properties. The <code>name</code> key is required and should be set to a valid language abbreviation. You could switch the system language in preferences of your booted simulator, run <code>xcrun simctl spawn booted defaults read .GlobalPreferences.plist</code>, and inspect the value of <code>AppleLanguages</code> to see possible combinations. <code>{\"name\": \"zh-Hant-CN\"}</code> locale map no System locale properties. The <code>name</code> key is required and should be set to a valid language abbreviation. The <code>calendar</code>key is optonal and could be set to a valid calendar format name. You could switch the system locale/calendar format in preferences of your booted simulator, run <code>xcrun simctl spawn booted defaults read .GlobalPreferences.plist</code>, and inspect the value of <code>AppleLocale</code> to see possible combinations. <code>{\"name\": \"uk_UA\", \"calendar\": \"gregorian\"}</code>"},{"location":"execute-methods/#returned-result_23","title":"Returned Result","text":"<p><code>true</code> if any of settings has been successfully changed.</p>"},{"location":"execute-methods/#mobile-startaudiorecording","title":"mobile: startAudioRecording","text":"<p>Records the given hardware audio input into an .mp4 file. You must allow the <code>audio_record</code> security feature in order to use this extension. Also it is required that FFMpeg is installed on the machibe where Appium server is running.</p>"},{"location":"execute-methods/#arguments_37","title":"Arguments","text":"Name Type Required Description Example audioInput string or int yes The name of the corresponding audio input device to use for the capture. The full list of capture devices could be shown using <code>ffmpeg -f avfoundation -list_devices true -i \"\"</code> Terminal command. 1 audioCodec string no The name of the audio codec. The Advanced Audio Codec (aac) is used by default. aac audioBitrate string no The bitrate of the resulting audio stream. <code>128k</code> by default. 256k audioChannels string or int no The count of audio channels in the resulting stream. Setting it to <code>1</code> will create a single channel (mono) audio stream. <code>2</code> By default 1 audioRate string or int no The sampling rate of the resulting audio stream. 44100 by default 22050 timeLimit string or int no The maximum recording time, in seconds. The default value is <code>180</code>, the maximum value is <code>43200</code> (12 hours). 60 forceRestart boolean no Whether to restart audio capture process forcefully when startRecordingAudio is called (<code>true</code>) or ignore the call until the current audio recording is completed (<code>false</code>, the default value). true"},{"location":"execute-methods/#mobile-stopaudiorecording","title":"mobile: stopAudioRecording","text":"<p>Stops recording of the audio input. If no audio recording process is running then the endpoint will try to get the recently recorded file. If no previously recorded file is found and no active audio recording processes are running then the method returns an empty string.</p>"},{"location":"execute-methods/#returned-result_24","title":"Returned Result","text":"<p>Base64-encoded content of the recorded media file or an empty string if no audio recording has been started before.</p>"},{"location":"execute-methods/#mobile-startpcap","title":"mobile: startPcap","text":"<p>Start mobile device network traffic capture. This extension only works if py-ios-device utility is installed on the server machine and only supports real iOS devices.</p>"},{"location":"execute-methods/#arguments_38","title":"Arguments","text":"Name Type Required Description Example timeLimitSec string or int no The maximum recording time, in seconds. The default value is <code>180</code>, the maximum value is <code>43200</code> (12 hours). 60 forceRestart boolean no Whether to restart traffic capture process forcefully when startPcap is called (<code>true</code>) or ignore the call until the current traffic capture is completed (<code>false</code>, the default value). true"},{"location":"execute-methods/#mobile-stoppcap","title":"mobile: stopPcap","text":"<p>Stops network traffic capture. If no traffic capture process is running then the endpoint will try to get the recently recorded file. If no previously recorded file is found and no active traffic capture processes are running then the method returns an empty string.</p>"},{"location":"execute-methods/#returned-result_25","title":"Returned Result","text":"<p>Base64-encoded content of the traffic capture file (.pcap) or an empty string if no traffic capture has been started before. Netowrk capture files could be opened in Wireshark application.</p>"},{"location":"execute-methods/#mobile-runxctest","title":"mobile: runXCTest","text":"<p>Run a native XCTest script. Launches a subprocess that runs the XC Test and blocks until it is completed. Parses the stdout of the process and returns its result as an array. Facebook's IDB tool is required to run such tests.</p>"},{"location":"execute-methods/#arguments_39","title":"Arguments","text":"Name Type Required Description Example testRunnerBundleId string yes Test app bundle io.appium.XCTesterAppUITests.xctrunner appUnderTestBundleId string yes App-under-test bundle com.mycompany.myapp xcTestBundleID string yes xctest bundle id io.appium.XCTesterAppUITests testType string no Test type. Either <code>ui</code> (the default one), <code>app</code> or <code>logic</code> app env map no Environment variables mapping to be passed to the test {'myvar': 'myvalue'} args array no Launch arguments to start the test with (see https://developer.apple.com/documentation/xctest/xcuiapplication/1500477-launcharguments for reference) ['-arg1', '--arg2'] timeout string or int no Timeout if session doesn't complete after given time (in milliseconds). <code>360000</code>ms by default 120000"},{"location":"execute-methods/#returned-result_26","title":"Returned Result","text":"<p>The API calls returns a map with the following entries:</p> <ul> <li>results: The array of test results. Each item in this array conists of the following entries:</li> <li>testName: Name of the test (e.g.: 'XCTesterAppUITests - XCTesterAppUITests.XCTesterAppUITests/testExample')</li> <li>passed: Did the tests pass?</li> <li>crashed: Did the tests crash?</li> <li>status: Test result status (e.g.: 'passed', 'failed', 'crashed')</li> <li>duration: How long did the tests take (in seconds)</li> <li>failureMessage: Failure message (if applicable)</li> <li>location The geolocation of the test (if applicable)</li> <li>code: The exit code of the process. <code>0</code> value marks a successful execution.</li> <li>signal: The signal that terminated the process. Could be <code>null</code> (e.g.: <code>SIGTERM</code>)</li> </ul>"},{"location":"execute-methods/#mobile-installxctestbundle","title":"mobile: installXCTestBundle","text":"<p>Installs an XCTest bundle to the device under test. Facebook's IDB tool is required to for this API to work.</p>"},{"location":"execute-methods/#arguments_40","title":"Arguments","text":"Name Type Required Description Example xctestBundle string yes Path to your xctest .app bundle. Could be an URL /path/to/my/bundle.app"},{"location":"execute-methods/#mobile-listxctestbundles","title":"mobile: listXCTestBundles","text":"<p>List XCTest bundles that are installed on device. Facebook's IDB tool is required to for this API to work.</p>"},{"location":"execute-methods/#returned-result_27","title":"Returned Result","text":"<p>Array of XCTest bundles (e.g.: [\"XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance\"])</p>"},{"location":"execute-methods/#mobile-listxctestsintestbundle","title":"mobile: listXCTestsInTestBundle","text":"<p>List XCTests in a test bundle. Facebook's IDB tool is required to for this API to work.</p>"},{"location":"execute-methods/#arguments_41","title":"Arguments","text":"Name Type Required Description Example bundle string yes Bundle ID of the XCTest 'com.bundle.myapp'"},{"location":"execute-methods/#returned-result_28","title":"Returned Result","text":"<p>Array of xctests in the test bundle (e.g.: <code>[ 'XCTesterAppUITests.XCTesterAppUITests/testExample', 'XCTesterAppUITests.XCTesterAppUITests/testLaunchPerformance' ]</code>)</p>"},{"location":"execute-methods/#mobile-viewportrect","title":"mobile: viewportRect","text":"<p>Retrieves the viwport dimensions. The viewport is the device's screen size with status bar size subtracted if the latter is present/visible.</p>"},{"location":"execute-methods/#returned-result_29","title":"Returned Result","text":"<p>The response looks like <code>{\"value\":{\"left\":0,\"top\":96,\"width\":828,\"height\":1696}}</code>.</p> <p><code>left</code> and <code>top</code> are distance from the <code>left</code> of the screen and the <code>top</code> of the screen. iOS Drawing Concepts could help about the relationship of coordinate.</p> <p><code>width</code> and <code>height</code> are the screen's width and height.</p>"},{"location":"execute-methods/#mobile-devicescreeninfo","title":"mobile: deviceScreenInfo","text":"<p>Get information about screen.</p>"},{"location":"execute-methods/#returned-result_30","title":"Returned Result","text":"<p>The response looks like <code>{\"value\":{\"statusBarSize\":{\"width\":414,\"height\":48},\"scale\":2}}</code></p> <p><code>statusBarSize</code> contains status bar dimensions. It is the result of status bar. <code>scale</code> is screen scale.</p>"},{"location":"execute-methods/#mobile-swipe","title":"mobile: swipe","text":"<p>This gesture performs a simple \"swipe\" gesture on the particular screen element or on the application element, which is usually the whole screen. This method does not accept coordinates and simply emulates single swipe with one finger. It might be useful for such cases like album pagination, switching views, etc. More advanced cases may require to call mobile: dragFromToForDuration, where one can supply coordinates and duration.</p>"},{"location":"execute-methods/#arguments_42","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to swipe on. Application element will be used instead if this argument is not provided fe50b60b-916d-420b-8728-ee2072ec53eb direction Either 'up', 'down', 'left' or 'right' yes The direction in which to swipe up velocity number no This argument is optional and is only supported since Appium server version 1.19 and Xcode SDK version 11.4+. The value is measured in pixels per second and same values could behave differently on different devices depending on their display density. Higher values make swipe gesture faster (which usually scrolls larger areas if we apply it to a list) and lower values slow it down. Only values greater than zero have effect. 250"},{"location":"execute-methods/#examples","title":"Examples","text":"<pre><code>// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap&lt;String, Object&gt; params = new HashMap&lt;&gt;();\nparams.put(\"direction\", \"down\");\nparams.put(\"velocity\", 2500);\nparams.put(\"element\", ((RemoteWebElement) element).getId());\njs.executeScript(\"mobile: swipe\", params);\n</code></pre>"},{"location":"execute-methods/#references","title":"References","text":"<ul> <li>swipeDown</li> <li>swipeDownWithVelocity:</li> <li>swipeUp</li> <li>swipeUpWithVelocity:</li> <li>swipeLeft</li> <li>swipeLeftWithVelocity:</li> <li>swipeRight</li> <li>swipeRightWithVelocity:</li> </ul>"},{"location":"execute-methods/#mobile-scroll","title":"mobile: scroll","text":"<p>Scrolls the element or the whole screen. Different scrolling strategies are supported. Arguments define the choosen strategy: either 'name', 'direction', 'predicateString' or 'toVisible' in that order. All strategies are exclusive and only one strategy can be applied at a single moment of time. Use \"mobile: scroll\" to emulate precise scrolling in tables or collection views, where it is already known to which element the scrolling should be performed. Although, there is one known limitation there: in case it is necessary to perform too many scroll gestures on parent container to reach the necessary child element (tens of them) then the method call may fail. Important: The implemntation of this extension relies on several undocumented XCTest features, which might not always be reliable. Thus it might not always work as expected.</p>"},{"location":"execute-methods/#arguments_43","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to scroll on (e.g. the container). Application element will be used if this argument is not set fe50b60b-916d-420b-8728-ee2072ec53eb name string no The accessibility id of the child element, to which scrolling is performed. The same result can be achieved by setting predicateString argument to 'name == accessibilityId'. Has no effect if elementId is not a container cell12 direction Either 'up', 'down', 'left' or 'right' yes The main difference from swipe call with the same argument is that scroll will try to move the current viewport exactly to the next/previous page (the term \"page\" means the content, which fits into a single device screen) down predicateString string no The NSPredicate locator of the child element, to which the scrolling should be performed. Has no effect if elementId is not a container label == \"foo\" toVisible boolean no If set to true then asks to scroll to the first visible elementId in the parent container. Has no effect if elementId is not set true"},{"location":"execute-methods/#examples_1","title":"Examples","text":"<pre><code># Python\ndriver.execute_script('mobile: scroll', {'direction': 'down'});\n</code></pre>"},{"location":"execute-methods/#mobile-pinch","title":"mobile: pinch","text":"<p>Performs pinch gesture on the given element or on the application element.</p>"},{"location":"execute-methods/#arguments_44","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to pinch on. Application element will be used instead if this parameter is not provided fe50b60b-916d-420b-8728-ee2072ec53eb scale number yes Pinch scale of type float. Use a scale between 0 and 1 to \"pinch close\" or zoom out and a scale greater than 1 to \"pinch open\" or zoom in. 0.5 velocity number yes The velocity of the pinch in scale factor per second (float value) 2.2"},{"location":"execute-methods/#examples_2","title":"Examples","text":"<pre><code># Ruby\nexecute_script 'mobile: pinch', scale: 0.5, velocity: 1.1, element: element.ref\n</code></pre>"},{"location":"execute-methods/#reference","title":"Reference","text":"<p>pinchWithScale:velocity:</p>"},{"location":"execute-methods/#mobile-doubletap","title":"mobile: doubleTap","text":"<p>Performs double tap gesture on the given element or on the screen.</p>"},{"location":"execute-methods/#arguments_45","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no if x and y are set The internal element identifier (as hexadecimal hash string) to double tap on fe50b60b-916d-420b-8728-ee2072ec53eb x number no if elementId is set Screen x tap coordinate of type float. 100 y number no if elementId is set Screen y tap coordinate of type float. 100"},{"location":"execute-methods/#examples_3","title":"Examples","text":"<pre><code>// javascript\ndriver.execute('mobile: doubleTap', {element: element.value.ELEMENT});\n</code></pre>"},{"location":"execute-methods/#mobile-touchandhold","title":"mobile: touchAndHold","text":"<p>Performs long press gesture on the given element or on the screen.</p>"},{"location":"execute-methods/#arguments_46","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no if x and y are set The internal element identifier (as hexadecimal hash string) to long tap on fe50b60b-916d-420b-8728-ee2072ec53eb duration number yes The float duration of press action in seconds 1.5 x number no if elementId is set Screen x tap coordinate of type float. 100 y number no if elementId is set Screen y tap coordinate of type float. 100"},{"location":"execute-methods/#examples_4","title":"Examples","text":"<pre><code>// c#\nDictionary&lt;string, object&gt; tfLongTap = new Dictionary&lt;string, object&gt;();\ntfLongTap.Add(\"element\", element.Id);\ntfLongTap.Add(\"duration\", 2.0);\n((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: touchAndHold\", tfLongTap);\n</code></pre>"},{"location":"execute-methods/#reference_1","title":"Reference","text":"<p>pressForDuration:</p>"},{"location":"execute-methods/#mobile-twofingertap","title":"mobile: twoFingerTap","text":"<p>Performs two finger tap gesture on the given element or on the application element.</p>"},{"location":"execute-methods/#arguments_47","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to tap on. Application element will be used instead if this parameter is not provided fe50b60b-916d-420b-8728-ee2072ec53eb"},{"location":"execute-methods/#examples_5","title":"Examples","text":"<pre><code>// c#\nDictionary&lt;string, object&gt; tfTap = new Dictionary&lt;string, object&gt;();\ntfTap.Add(\"element\", element.Id);\n((IJavaScriptExecutor)driver).ExecuteScript(\"mobile: twoFingerTap\", tfTap);\n</code></pre>"},{"location":"execute-methods/#reference_2","title":"Reference","text":"<p>twoFingerTap</p>"},{"location":"execute-methods/#mobile-tap","title":"mobile: tap","text":"<p>Performs tap gesture by coordinates on the given element or on the screen.</p>"},{"location":"execute-methods/#arguments_48","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to tap on. x and y tap coordinates will be calulated relatively to the current element position on the screen if this argument is provided. Otherwise they should be calculated relatively to the active application element. fe50b60b-916d-420b-8728-ee2072ec53eb x number yes Screen x tap coordinate of type float. 100 y number yes Screen y tap coordinate of type float. 100"},{"location":"execute-methods/#mobile-dragfromtoforduration","title":"mobile: dragFromToForDuration","text":"<p>Performs drag and drop gesture by coordinates. This can be done either on an element or on the screen</p>"},{"location":"execute-methods/#arguments_49","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string no The internal element identifier (as hexadecimal hash string) to perform drag on. All the coordinates will be calculated relatively this this element position on the screen. Absolute screen coordinates are expected if this argument is not set fe50b60b-916d-420b-8728-ee2072ec53eb duration number yes Float number of seconds in range [0.5, 60]. How long the tap gesture at starting drag point should be before to start dragging 5.3 fromX number yes The x coordinate of starting drag point 100 fromY number yes The y coordinate of starting drag point 100 toX number yes The x coordinate of ending drag point 200 toY number yes The y coordinate of ending drag point 200"},{"location":"execute-methods/#examples_6","title":"Examples","text":"<pre><code>// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap&lt;String, Object&gt; params = new HashMap&lt;&gt;();\nparams.put(\"duration\", 1.0);\nparams.put(\"fromX\", 100);\nparams.put(\"fromY\", 100);\nparams.put(\"toX\", 200);\nparams.put(\"toY\", 200);\nparams.put(\"element\", ((RemoteWebElement) element).getId());\njs.executeScript(\"mobile: dragFromToForDuration\", params);\n</code></pre>"},{"location":"execute-methods/#reference_3","title":"Reference","text":"<p>clickForDuration:thenDragToElement:</p>"},{"location":"execute-methods/#mobile-dragfromtowithvelocity","title":"mobile: dragFromToWithVelocity","text":"<p>Initiates a press-and-hold gesture, drags to another coordinate or an element with a velocity you specify, and holds for a duration you specify.</p>"},{"location":"execute-methods/#arguments_50","title":"Arguments","text":"Name Type Required Description Example fromElementId string no The internal element identifier (as hexadecimal hash string) to start the drag gesture from. Absolute screen coordinates are expected if this argument is not set fe50b60b-916d-420b-8728-ee2072ec53eb toElementId string no The internal element identifier (as hexadecimal hash string) to end the drag gesture on. This parameter is mandatory if <code>fromElementId</code> is provided fe50b60b-916d-420b-8728-ee2072ec53eb pressDuration number yes Float number of seconds in range [0, 60]. How long the tap gesture at starting drag point should be before to start dragging 0.5 holdDuration number yes Float number of seconds in range [0, 60]. The duration for which to hold over the other coordinate or the given element after dragging 0.1 velocity number yes The speed at which to move from the initial press position to the other element or coordinate, expressed in pixels per second 400 fromX number no The x coordinate of starting drag point. Must be provided if <code>fromElementId</code> is not defined 100 fromY number no The y coordinate of starting drag point. Must be provided if <code>fromElementId</code> is not defined 100 toX number no The x coordinate of ending drag point. Must be provided if <code>fromElementId</code> is not defined 200 toY number no The y coordinate of ending drag point. Must be provided if <code>fromElementId</code> is not defined 200"},{"location":"execute-methods/#references_1","title":"References","text":"<p>pressForDuration:thenDragToElement:withVelocity:thenHoldForDuration: pressForDuration:thenDragToCoordinate:withVelocity:thenHoldForDuration:</p>"},{"location":"execute-methods/#mobile-selectpickerwheelvalue_1","title":"mobile: selectPickerWheelValue","text":"<p>Performs selection of the next or previous picker wheel value. This might be useful if these values are populated dynamically, so you don't know which one to select or value selection does not work because of XCTest bug.</p>"},{"location":"execute-methods/#arguments_51","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string yes PickerWheel's internal element id (as hexadecimal hash string) to perform value selection on. The element must be of type XCUIElementTypePickerWheel fe50b60b-916d-420b-8728-ee2072ec53eb order string yes Either next to select the value next to the current one from the target picker wheel or previous to select the previous one next offset number no The value in range [0.01, 0.5]. It defines how far from picker wheel's center the click should happen. The actual distance is calculated by multiplying this value to the actual picker wheel height. Too small offset value may not change the picker wheel value and too high value may cause the wheel to switch two or more values at once. Usually the optimal value is located in range [0.15, 0.3]. 0.2 by default 0.3"},{"location":"execute-methods/#examples_7","title":"Examples","text":"<pre><code>// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\nMap&lt;String, Object&gt; params = new HashMap&lt;&gt;();\nparams.put(\"order\", \"next\");\nparams.put(\"offset\", 0.15);\nparams.put(\"element\", ((RemoteWebElement) element).getId());\njs.executeScript(\"mobile: selectPickerWheelValue\", params);\n</code></pre>"},{"location":"execute-methods/#mobile-rotateelement","title":"mobile: rotateElement","text":"<p>Performs rotate gesture on the given element.</p>"},{"location":"execute-methods/#arguments_52","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string yes Internal element id (as hexadecimal hash string) to perform rotation on fe50b60b-916d-420b-8728-ee2072ec53eb rotation number yes The rotation of the gesture in radians Math.PI velocity number yes The velocity of the rotation gesture in radians per second Math.PI / 4"},{"location":"execute-methods/#examples_8","title":"Examples","text":"<pre><code>// Java\nJavascriptExecutor js = (JavascriptExecutor) driver;\njs.executeScript(\"mobile: rotateElement\", ImmutableMap.of(\n// rotate clockwise, 90 degrees\n\"rotation\", -Math.PI / 2,\n// in approximately two seconds\n\"velocity\", Math.PI / 4,\n\"element\", ((RemoteWebElement) element).getId()\n));\n</code></pre>"},{"location":"execute-methods/#reference_4","title":"Reference","text":"<p>rotate:withVelocity:</p>"},{"location":"execute-methods/#mobile-tapwithnumberoftaps","title":"mobile: tapWithNumberOfTaps","text":"<p>Sends one or more taps with one or more touch points since Appium 1.17.1.</p>"},{"location":"execute-methods/#arguments_53","title":"Arguments","text":"Name Type Required Description Example elementId (\"element\" prior to Appium v 1.22) string yes The internal element identifier (as hexadecimal hash string) to perform one or more taps. fe50b60b-916d-420b-8728-ee2072ec53eb numberOfTaps number yes The number of taps 2 numberOfTouches number yes The number of touch points 2"},{"location":"execute-methods/#examples_9","title":"Examples","text":"<pre><code># Ruby\ne = @driver.find_element :id, 'target element'\n# Taps the element with a single touch point twice\n@driver.execute_script 'mobile: tapWithNumberOfTaps', {element: e.ref, numberOfTaps: 2, numberOfTouches: 1}\n</code></pre>"},{"location":"execute-methods/#reference_5","title":"Reference","text":"<p>tapWithNumberOfTaps:numberOfTouches:</p>"},{"location":"execute-methods/#mobile-forcepress","title":"mobile: forcePress","text":"<p>Emulates force press on the given element/coordinates. An error is thrown if the target device does not support force press gesture.</p>"},{"location":"execute-methods/#arguments_54","title":"Arguments","text":"Name Type Required Description Example elementId string no The internal element identifier (as hexadecimal hash string) to perform one or more taps. It is expected that both x and y are provided if this argument is ommitted. If the element identifier is provided without coordinates then the actual element's touch point will be calculated automatically by WebDriverAgent. fe50b60b-916d-420b-8728-ee2072ec53eb x number no x coordinate of the gesture. It is calculated relatively to the given element (if provided). Otherwise the gesture destination point is calculated relatively to the active application. 100 y number no y coordinate of the gesture. It is calculated relatively to the given element (if provided). Otherwise the gesture destination point is calculated relatively to the active application 100 duration number no The float number of seconds the force press action would take. If duration is provided then it is also expected that a custom pressure value is provided as well. <code>0.5</code> by default. 2.5 pressure number no The float number defining how much pressure to apply. If pressure is provided then it is also expected that a custom duration value is provided as well. <code>1.0</code> by default 1.5"},{"location":"execute-methods/#mobile-scrolltoelement","title":"mobile: scrollToElement","text":"<p>Scrolls the current viewport to the given element. It is expected the destination element is inside a scrollable container and is hittable. The scroll direction is detected automatically. This API uses native XCTest calls, so it performs scrolling pretty fast. The same native call is implicitly performed by a vanilla <code>click</code> API if the destination element is out of the current viewport. An exception is thrown if the scrolling action cannot be performed. This extension is available since the driver version 4.7.0.</p>"},{"location":"execute-methods/#arguments_55","title":"Arguments","text":"Name Type Required Description Example elementId string yes The internal element identifier (as hexadecimal hash string) to scroll to. The destination element must be located in a scrollable container and must be hittable. If the element is already present in the current viewport then no action is performed. fe50b60b-916d-420b-8728-ee2072ec53eb"},{"location":"execute-methods/#mobile-resetlocationservice","title":"mobile: resetLocationService","text":"<p>Reset the location service on real device since Appium 1.22.0. It could delay a few seconds to reflect the location by the system. It raises an error if the device is simulator or an error occurred during the reset.</p>"},{"location":"execute-methods/#mobile-enableconditioninducer","title":"mobile: enableConditionInducer","text":"<p>Important: Device conditions are available for real devices running iOS 13.0 and later.</p> <p>This API is going to throw an error if it is called while another condition inducer has been already enabled and is not explicitly disabled.</p> <pre><code>mobile: enableConditionInducer\nmobile: disableConditionInducer\nmobile: listConditionInducers\n</code></pre> <p>The above three extensions are available since the driver version 4.9.0.</p> <p>You can create a condition on a connected device to test your app under adverse conditions, such as poor network connectivity or thermal constraints.</p> <p>When you start a device condition, the operating system on the device behaves as if its environment has changed. The device condition remains active until you stop the device condition or disconnect the device. For example, you can start a device condition, run your app, monitor your app\u2019s energy usage, and then stop the condition.</p> <p>Reference: Test under adverse device conditions (iOS)</p> Name Type Required Description Example conditionID string yes Get the conditionID parameter through the command <code>mobile: availableConditionInducer</code> SlowNetworkCondition profileID string yes Get the profileID parameter through the command <code>mobile: availableConditionInducer</code> SlowNetwork100PctLoss"},{"location":"execute-methods/#returned-result_31","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code>, where <code>true</code> means enabling of the condition inducer has been successful</p>"},{"location":"execute-methods/#mobile-listconditioninducers","title":"mobile: listConditionInducers","text":"<p>Get all condition inducer configuration profiles</p>"},{"location":"execute-methods/#returned-result_32","title":"Returned Result","text":"<p>The response looks like</p> <pre><code>[{\n    \"profiles\": [\n        {\n            \"name\": \"100% packet loss\",\n            \"identifier\": \"SlowNetwork100PctLoss\",   // enableConditionInducer profileID\n            \"description\": \"Name: 100% Loss Scenario\n                            Downlink Bandwidth: 0 Mbps\n                            Downlink Latency: 0 ms\n                            Downlink Packet Loss Ratio: 100%\n                            Uplink Bandwidth: 0 Mbps\n                            Uplink Latency: 0 ms\n                            Uplink Packet Loss Ratio: 100%\"\n        },\n    ],\n    \"profilesSorted\": true,\n    \"identifier\": \"SlowNetworkCondition\",   // enableConditionInducer conditionID\n    \"isDestructive\": false,\n    \"isInternal\": false,\n    \"activeProfile\": \"\",\n    \"name\": \"Network Link\",\n    \"isActive\": false\n}]\n</code></pre>"},{"location":"execute-methods/#mobile-disableconditioninducer","title":"mobile: disableConditionInducer","text":"<p>Disable device condition inducer.</p> <p>Usually a persistent connection is maintained after enable the condition inducer, and this method is only valid for this connection.</p> <p>If the connection is disconnected, condition inducer will be automatically disabled</p>"},{"location":"execute-methods/#returned-result_33","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code>, where <code>true</code> means disabling of the condition inducer has been successful</p>"},{"location":"execute-methods/#mobile-updatesafaripreferences","title":"mobile: updateSafariPreferences","text":"<p>Updates preferences of Mobile Safari on Simulator</p>"},{"location":"execute-methods/#arguments_56","title":"Arguments","text":"Name Type Required Description Example preferences map yes An object containing Mobile Safari preferences to be updated. The list of available setting names and their values could be retrieved by changing the corresponding Safari settings under Preferences-&gt;Safari and then inspecting <code>Library/Preferences/com.apple.mobilesafari.plist</code> file inside of <code>com.apple.mobilesafari</code> app container. The full path to the Mobile Safari's container could be retrieved from <code>xcrun simctl get_app_container &lt;sim_udid&gt; com.apple.mobilesafari data</code> command output. Use the <code>xcrun simctl spawn &lt;sim_udid&gt; defaults read &lt;path_to_plist&gt;</code> command to print the actual .plist content to the Terminal. { ShowTabBar: 0, WarnAboutFraudulentWebsites: 0 }"},{"location":"execute-methods/#mobile-deeplink","title":"mobile: deepLink","text":"<p>Opens the given URL with the default or the given application. This functionality is only available since xcuitest driver version 4.17. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p>"},{"location":"execute-methods/#arguments_57","title":"Arguments","text":"Name Type Required Description Example url string yes The URL to be opened. This parameter is manadatory. https://apple.com, myscheme:yolo bundleId string no The bundle identifier of an application to open the given url with. If not provided then the default application for the given url scheme is going to be used. com.myapp.yolo"},{"location":"execute-methods/#mobile-getsimulatedlocation","title":"mobile: getSimulatedLocation","text":"<p>Retrieves simulated geolocation value. This functionality is only available since xcuitest driver version 4.18. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p>"},{"location":"execute-methods/#returned-result_34","title":"Returned Result","text":"<p>This API returns a map with the following entries:</p> Name Type Description Example latitude number Measurement of distance north or south of the Equator. <code>null</code> if mobile: setSimulatedLocation has not been called before or the simulated geolocation has been reset by mobile: resetSimulatedLocation. 50.08546 longitude number Measurement of distance east or west of the prime meridian. <code>null</code> if mobile: setSimulatedLocation has not been called before or the simulated geolocation has been reset by mobile: resetSimulatedLocation. -20.12345"},{"location":"execute-methods/#mobile-setsimulatedlocation","title":"mobile: setSimulatedLocation","text":"<p>Sets simulated geolocation value. This functionality is only available since xcuitest driver version 4.18. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p>"},{"location":"execute-methods/#arguments_58","title":"Arguments","text":"Name Type Required Description Example latitude number yes Measurement of distance north or south of the Equator. 50.08546 longitude number yes Measurement of distance east or west of the prime meridian. -20.12345"},{"location":"execute-methods/#mobile-resetsimulatedlocation","title":"mobile: resetSimulatedLocation","text":"<p>Resets the previously set simulated geolocation value. This functionality is only available since xcuitest driver version 4.18. Xcode must be at version 14.3+ and iOS must be at version 16.4+.</p> <p>Warning Do not forget to reset the simulated geolocation value after your automated test is finished. If the value is not reset explcitly then the simulated one will remain until the next device restart.</p>"},{"location":"execute-methods/#mobile-getappstrings","title":"mobile: getAppStrings","text":"<p>Retrieves string resources for the given app language. An error is thrown if strings cannot be fetched or no strings exist for the given language abbreviation</p>"},{"location":"execute-methods/#arguments_59","title":"Arguments","text":"Name Type Required Description Example language string no The language abbreviation to fetch app strings mapping for. If no language is provided then strings for the 'en language would be returned fr stringFile string no Relative path to the corresponding .strings file starting from the corresponding .lproj folder base/main.strings"},{"location":"execute-methods/#returned-result_35","title":"Returned Result","text":"<p>App strings map, where keys are resource identifiers.</p>"},{"location":"execute-methods/#mobile-hidekeyboard","title":"mobile: hideKeyboard","text":"<p>Tries to hide the on-screen keyboard. Throws an exception if the keyboard cannot be hidden. On non-tablet devices the keyboard might not have an explicit button to hide it. In such case this API won't work and the only way to close the keyboard would be to simulate the same action an app user would do to close it. For example, swipe from top to bottom or tap the screen somewhere at the area not covered by the keyboard.</p>"},{"location":"execute-methods/#arguments_60","title":"Arguments","text":"Name Type Required Description Example keys string[] no One or more keyboard key names used to close/hide it. On tablet's such button is usually called 'done'."},{"location":"execute-methods/#mobile-iskeyboardshown","title":"mobile: isKeyboardShown","text":"<p>Checks if the system on-screen keyboard is visible.</p>"},{"location":"execute-methods/#returned-result_36","title":"Returned Result","text":"<p><code>true</code> if the keyboard is visible</p>"},{"location":"execute-methods/#mobile-lock","title":"mobile: lock","text":"<p>Lock the device (and optionally unlock it after a certain amount of time). Only simple (e.g. without a password) locks are supported.</p>"},{"location":"execute-methods/#arguments_61","title":"Arguments","text":"Name Type Required Description Example seconds number string no The number of seconds after which to unlock the device. Set to <code>0</code> or leave it empty to require manual unlock (e.g. do not block and automatically unlock afterwards)."},{"location":"execute-methods/#mobile-unlock","title":"mobile: unlock","text":"<p>Unlocks the previously locked device. Only simple (e.g. without a password) locks are supported.</p>"},{"location":"execute-methods/#mobile-islocked","title":"mobile: isLocked","text":"<p>Determine whether the device is locked.</p>"},{"location":"execute-methods/#returned-result_37","title":"Returned Result","text":"<p>Either <code>true</code> or <code>false</code></p>"},{"location":"execute-methods/#mobile-backgroundapp","title":"mobile: backgroundApp","text":"<p>Puts the app to the background and waits the given number of seconds. Then restores the app if necessary. The call is blocking.</p>"},{"location":"execute-methods/#arguments_62","title":"Arguments","text":"Name Type Required Description Example seconds number no The amount of seconds to wait between putting the app to background and restoring it. Any negative value means to not restore the app after putting it to background (the default behavior). 5"},{"location":"ios-predicate/","title":"iOS Predicates","text":"<p>NOTE: iOS predicates are usable via <code>-ios predicate string</code> and <code>-ios class chain</code> locator strategies</p> <p>NOTE: It is worth looking at NSPredicate Cheat Sheet.</p> <p>Native predicate search strategy (powered by Apple XCTest) provides much flexibility and is much faster than XPath. Predicates can be used to restrict a set of elements to select only those for which some condition evaluates to true.</p> <p>'-ios predicate string' example:</p> <pre><code>// java\nappiumDriver.findElements(AppiumBy.iOSNsPredicateString(\"isVisible == 1\"));\n</code></pre> <p>'-ios class chain' example:</p> <pre><code>// java\nappiumDriver.findElements(AppiumBy.iOSClassChain(\"**/XCUIElementTypeWindow[`label LIKE '*yolo*'`]\"));\n</code></pre> <p>The first example would select all visible elements on the page and the second one, - all elements of type <code>XCUIElementTypeWindow</code> whose label contains <code>yolo</code>. Class chain queries allow to create much more complicated search expressions and may contain multiple predicates. Read Class Chain Queries Construction Rules for more details on how to build such queries.</p>"},{"location":"ios-predicate/#basic-comparisons","title":"Basic Comparisons","text":"<p>= , == - The left-hand expression is equal to the right-hand expression: <pre><code>// java\nappiumDriver.findElements(AppiumBy.iOSNsPredicateString(\"label == 'Olivia'\"));\n// same in Xpath:\nappiumDriver.findElements(AppiumBy.xpath(\"//*[@label = 'Olivia']\"));\n</code></pre></p> <p>&gt;= , =&gt; - The left-hand expression is greater than or equal to the right-hand expression.</p> <p>&lt;= , =&lt; - The left-hand expression is less than or equal to the right-hand expression.</p> <p>&gt; - The left-hand expression is greater than the right-hand expression.</p> <p>&lt; - The left-hand expression is less than the right-hand expression.</p> <p>!= , &lt;&gt; - The left-hand expression is not equal to the right-hand expression.</p> <p>BETWEEN - The left-hand expression is between, or equal to either of, the values specified in the right-hand side. The right-hand side is a two value array (an array is required to specify order) giving upper and lower bounds. For example, <code>1 BETWEEN { 0 , 33 }</code>, or <code>$INPUT BETWEEN { $LOWER, $UPPER }</code>. In Objective-C, you could create a BETWEEN predicate as shown in the following example:</p> <pre><code>appiumDriver.findElements(AppiumBy.iOSNsPredicateString(\"rect.x BETWEEN { 1, 100 }\"));\n</code></pre> <p>This creates a predicate that matches all elements whole left top coordinate is in range between 1 and 100.</p>"},{"location":"ios-predicate/#boolean-value-predicates","title":"Boolean Value Predicates","text":"<p>TRUEPREDICATE - A predicate that always evaluates to <code>TRUE</code> .</p> <p>FALSEPREDICATE - A predicate that always evaluates to <code>FALSE</code>.</p>"},{"location":"ios-predicate/#basic-compound-predicates","title":"Basic Compound Predicates","text":"<p>AND , &amp;&amp; - Logical AND.</p> <p>OR , || - Logical OR.</p> <p>NOT , ! - Logical NOT.</p>"},{"location":"ios-predicate/#string-comparisons","title":"String Comparisons","text":"<p>String comparisons are by default case and diacritic sensitive. You can modify an operator using the key characters <code>c</code> and <code>d</code> within square braces to specify case and diacritic insensitivity respectively, for example <code>`value BEGINSWITH[cd] 'bar'</code></p> <p>BEGINSWITH - The left-hand expression begins with the right-hand expression.</p> <pre><code>appiumDriver.findElement(AppiumBy.iOSNsPredicateString(\"type == 'XCUIElementTypeButton' AND name BEGINSWITH 'results toggle'\"));\n// same in Xpath:\nappiumDriver.findElement(AppiumBy.xpath(\"//XCUIElementTypeButton[starts-with(@name, 'results toggle')]\"));\n</code></pre> <p>CONTAINS - The left-hand expression contains the right-hand expression.</p> <pre><code>appiumDriver.findElement(AppiumBy.iOSNsPredicateString(\"type == 'XCUIElementCollectionView' AND name CONTAINS 'opera'\"));\n// same in Xpath:\nappiumDriver.findElement(AppiumBy.xpath(\"//XCUIElementCollectionView[contains(@name, 'opera')]\"));\n</code></pre> <p>ENDSWITH - The left-hand expression ends with the right-hand expression.</p> <p>LIKE - The left hand expression equals the right-hand expression: ? and * are allowed as wildcard characters, where ? matches 1 character and * matches 0 or more characters. In Mac OS X v10.4, wildcard characters do not match newline characters.</p> <pre><code>appiumDriver.findElement(AppiumBy.iOSNsPredicateString(\"name LIKE '*Total: $*'\"));\n// XPath1 does not have an alternative to the above expression\n</code></pre> <p>MATCHES - The left hand expression equals the right hand expression using a regex -style comparison according to ICU v3 (for more details see the ICU User Guide for Regular Expressions).</p> <pre><code>appiumDriver.findElement(AppiumBy.iOSNsPredicateString(\"value MATCHES '.*of [1-9]'\"));\n// XPath1 does not have an alternative to the above expression\n</code></pre>"},{"location":"ios-predicate/#aggregate-operations","title":"Aggregate Operations","text":"<p>IN - Equivalent to an SQL IN operation, the left-hand side must appear in the collection specified by the right-hand side. For example, <code>name IN { 'Ben', 'Melissa', 'Matthew' }</code> . The collection may be an array, a set, or a dictionary\u2014in the case of a dictionary, its values are used.</p>"},{"location":"ios-predicate/#identifiers","title":"Identifiers","text":"<p>C style identifier - Any C style identifier that is not a reserved word.</p> <p>#symbol - Used to escape a reserved word into a user identifier.</p> <p>[\\]{octaldigit}{3} - Used to escape an octal number ( <code>\\</code> followed by 3 octal digits).</p> <p>[\\][xX]{hexdigit}{2} - Used to escape a hex number ( <code>\\x</code> or <code>\\X</code> followed by 2 hex digits).</p> <p>[\\][uU]{hexdigit}{4} - Used to escape a Unicode number ( <code>\\u</code> or <code>\\U</code> followed by 4 hex digits).</p>"},{"location":"ios-predicate/#literals","title":"Literals","text":"<p>Single and double quotes produce the same result, but they do not terminate each other. For example, <code>\"abc\"</code> and <code>'abc'</code> are identical, whereas <code>\"a'b'c\"</code> is equivalent to a space-separated concatenation of <code>a, 'b', c</code>.</p> <p>FALSE , NO - Logical false.</p> <p>TRUE , YES - Logical true.</p> <p>NULL , NIL - A null value.</p> <p>SELF - Represents the object being evaluated.</p> <p>\"text\" - A character string.</p> <p>'text' - A character string.</p> <p>Comma-separated literal array - For example, <code>{ 'comma', 'separated', 'literal', 'array' }</code> .</p> <p>Standard integer and fixed-point notations - For example, <code>1 , 27 , 2.71828 , 19.75</code> .</p> <p>Floating-point notation with exponentiation - For example, <code>9.2e-5</code> .</p> <p>0x - Prefix used to denote a hexadecimal digit sequence.</p> <p>0o - Prefix used to denote an octal digit sequence.</p> <p>0b - Prefix used to denote a binary digit sequence.</p>"},{"location":"ios-predicate/#reserved-words","title":"Reserved Words","text":"<p>The following words are reserved:</p> <p><code>AND, OR, IN, NOT, ALL, ANY, SOME, NONE, LIKE, CASEINSENSITIVE, CI, MATCHES, CONTAINS, BEGINSWITH, ENDSWITH, BETWEEN, NULL, NIL, SELF, TRUE, YES, FALSE, NO, FIRST, LAST, SIZE, ANYKEY, SUBQUERY, CAST, TRUEPREDICATE, FALSEPREDICATE</code></p>"},{"location":"ios-predicate/#available-attributes","title":"Available Attributes","text":"<p>Check the Element Attributes document to know all element attribute names and types that are available for usage in predicate locators.</p>"},{"location":"ios-tvos/","title":"tvOS Support","text":"<p>tvOS is supported since XCUITest driver bundled with Appium 1.13.0+</p> <p></p> <p>Warning Apple TV 4K is not supported because appium-ios-device library, that we use to support low-level communication with devices, only supports devices connected via USB.</p>"},{"location":"ios-tvos/#setup","title":"Setup","text":"<p>You can run tests for tvOS by changing the <code>platformName</code> capability to <code>tvOS</code> like it is done below.</p> <pre><code>{\n\"automationName\": \"XCUITest\",\n\"platformName\": \"tvOS\", // here\n\"platformVersion\": \"12.2\",\n\"deviceName\": \"Apple TV\",\n...\n}\n</code></pre> <p>Note Make sure tvOS simulator exists in your simulator list if you would like to run your test on tvOS simulators, e.g. <code>xcrun simctl list | grep \"com.apple.CoreSimulator.SimRuntime.tvOS\"</code> command shows some results</p>"},{"location":"ios-tvos/#limitations","title":"Limitations","text":"<p>Gesture commands do not work for tvOS. Some commands such as pasteboard do not work as well.</p> <p>We can handle <code>focus</code> on tvOS by simply pressing keys such as up/down/left/right/home. tvOS performs actions on the focused element. You can get the value of the <code>focus</code> attribute via Attributes API. Get active element API returns the focused element.</p>"},{"location":"ios-tvos/#basic-actions","title":"Basic Actions","text":"<p>pressButton and getting the focused element by get active element are basic actions for tvOS. Consider using <code>wait</code> methods since tvOS also has animation.</p> <pre><code># Ruby\nelement = @driver.find_element :accessibility_id, 'element on the app'\n# Returns true if the element is focused, otherwise false\nelement.focused #=&gt; 'true'\n# Appium moves the focus to the element by pressing the corresponding keys and clicking the element\nelement.click\n# Get the app state\n@driver.app_state('test.package.name') # =&gt; :running_in_foreground\n# Press keys\n@driver.execute_script 'mobile: pressButton', { name: 'Home' }\n# Move focus and get the focused element\n@driver.execute_script 'mobile: pressButton', { name: 'Up' }\n# Get a focused element\nelement = @driver.switch_to.active_element\nelement.label #=&gt; \"Settings\"\n</code></pre> <pre><code># Python\nelement = driver.find_element_by_accessibility_id('element on the app')\nelement.get_attribute('focused')\nelement.click()\ndriver.query_app_state('test.package.name')\ndriver.execute_script('mobile: pressButton', { 'name': 'Home' })\ndriver.execute_script('mobile: pressButton', { 'name': 'Up' })\nelement = driver.switch_to.active_element\nelement.get_attribute('label')\n</code></pre> <pre><code>// Java\nWebElement element = driver.findElementByAccessibilityId(\"element on the app\");\nelement.getAttribute(\"focused\");\nelement.click();\ndriver.queryAppState(\"test.package.name\");\ndriver.executeScript(\"mobile: pressButton\", ImmutableMap.of(\"name\", \"Home\"));\ndriver.executeScript(\"mobile: pressButton\", ImmutableMap.of(\"name\", \"Up\"));\nelement = driver.switchTo().activeElement();\nelement.getAttribute(\"label\");\n</code></pre> <pre><code>// webdriver.io example\nconst element = $('~SomeAccessibilityId');\nelement.getAttribute('focused');\nelement.click();\ndriver.execute('mobile: pressButton', {name: 'Home'});\ndriver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = driver.getActiveElement();\nactiveElement.getAttribute('label');\n// WD example\nconst element = await driver.elementByAccessibilityId('element on the app');\nawait element.getAttribute('focused');\nawait element.click();\nawait driver.execute('mobile: pressButton', {name: 'Home'});\nawait driver.execute('mobile: pressButton', {name: 'Up'});\nconst activeElement = await driver.active();\nawait activeElement.getAttribute('label');\n</code></pre>"},{"location":"ios-tvos/#more-actions","title":"More actions","text":"<p>tvOS provides remote controller based actions. Appium provides Buttons actions via <code>mobile: pressButton</code>. These are <code>menu</code>, <code>up/down/left/right</code>, <code>home</code>, <code>playpause</code> and <code>select</code>. Available actions are enumerated in the error message if you send unsupported button name to the server.</p> <p>Appium calculates <code>up/down/left/right</code> and <code>select</code> sequence automatically if the combination of <code>find element/s</code> and <code>click</code> is provided. You should not care about which keys should be pressed to reach an arbitrary element every time.</p> <p>You can also handle setting a focus or starting/pausing a playback pressing button actions. <code>menu</code> button works as back for iOS context in tvOS.</p>"},{"location":"ios-tvos/#resources","title":"Resources","text":""},{"location":"ios-tvos/#related-issues","title":"Related issues","text":"<ul> <li>https://github.com/appium/appium/pull/12401</li> <li>e.g. appium-xcuitest-driver#911, appium-xcuitest-driver#939, appium-xcuitest-driver#931, appium/WebDriverAgent/pull/163</li> </ul>"},{"location":"ios-xctest-file-movement/","title":"Pushing/Pulling Files","text":"<p>Appium provides Pull Folder, Pull File and Push File to move files. This documentation aims to help to understand how they work for iOS.</p>"},{"location":"ios-xctest-file-movement/#format","title":"Format","text":"<p>Below is the basic format.</p> <ol> <li><code>@&lt;app_bundle_id&gt;:&lt;optional_container_type&gt;/&lt;path_to_the_file_or_folder_inside_container&gt;</code></li> <li><code>@&lt;app_bundle_id&gt;/&lt;path_to_the_file_or_folder_inside_container&gt;</code></li> <li><code>&lt;path_to_the_file_or_folder_inside_container&gt;</code></li> </ol>"},{"location":"ios-xctest-file-movement/#real-device","title":"Real device","text":""},{"location":"ios-xctest-file-movement/#format_1","title":"Format","text":"<p>The format of method argument should be the following:</p> <ul> <li><code>@&lt;app_bundle_id&gt;</code> is the application bundle identifier</li> <li><code>optional_container_type</code> is the container type<ul> <li><code>documents</code> is the only available option<ul> <li>You may specify <code>documents</code> container type only for bundle ids that exists in the device<ul> <li>Since appium-xcuitest-driver v3.55.0, mobile: listApps provides a list of available applications. Applications which have <code>UIFileSharingEnabled</code> attribute as <code>true</code> can be specified.</li> </ul> </li> <li> <p>e.g. Below On My iPhone image has Slack folder, but <code>com.tinyspeck.chatlyio</code> does not exist in installed bundle ids. Then, we cannot mount it as <code>com.tinyspeck.chatlyio@documents/</code></p> <p>     - The others work as format 2         - Only apps having the flag <code>UIFileSharingEnabled</code> in their <code>info.plist</code> can be mounted - <code>path_to_the_file_or_folder_inside_container</code> is the target to push/pull to/from them.     - If the <code>optional_container_type</code> is <code>documents</code>, this path will be mapped to       <code>On My iPhone/&lt;app name&gt;</code> in Files app</p> </li> </ul> </li> </ul> </li> </ul> <p>format 3 is not allowed for real devices.</p>"},{"location":"ios-xctest-file-movement/#example","title":"Example","text":"<p>If you would like to pull Presentation.key form Keynote app, you can get it as below.</p> <ul> <li>Pull file</li> </ul> <pre><code>// webdriver.io\nlet data = driver.pullFile('@io.appium.example:documents/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');\n</code></pre> <pre><code># ruby_lib_core\nfile = @driver.pull_file '@com.apple.Keynote:documents/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f&lt;&lt; file }\n</code></pre> <p>The file is in On My iPhone/Keynote of Files app.</p> Top On  My iPhone Keynote <p>If the file is in deeper place like On My iPhone/Keynote/Dir1/Dir2, then the Ruby command should be:</p> <pre><code>// webdriver.io\nlet data = driver.pullFile('@io.appium.example:documents/Dir1/Dir2/Presentation.key');\nawait fs.writeFile('presentation.key', Buffer.from(data, 'base64'), 'binary');\n</code></pre> <pre><code># ruby_lib_core\nfile = @driver.pull_file '@com.apple.Keynote:documents/Dir1/Dir2/Presentation.key'\nFile.open('presentation.key', 'wb') { |f| f&lt;&lt; file }\n</code></pre> <ul> <li>Pull folder</li> </ul> <p>You can pull documents root of On My iPhone/Keynote as <code>@driver.pull_folder '@com.apple.Keynote:documents/'</code>. <code>@driver.pull_folder '@com.apple.Keynote:documents/Keynote'</code> is to get files in the Keynote folder. Then, Keynote is the documentation root to get.</p> <pre><code>// webdriver.io\nlet data = driver.pullFolder('@io.appium.example:documents/');\nawait fs.writeFile('documents.zip', Buffer.from(data, 'base64'), 'binary');\nlet data = driver.pullFolder('@io.appium.example:documents/Keynote');\nawait fs.writeFile('keynote.zip', Buffer.from(data, 'base64'), 'binary');\n</code></pre> <pre><code># ruby_lib_core\nfile = @driver.pull_folder '@com.apple.Keynote:documents/'\nFile.open('documents.zip', 'wb') { |f| f&lt;&lt; file }\nfile = @driver.pull_folder '@com.apple.Keynote:documents/Keynote'\nFile.open('keynote.zip', 'wb') { |f| f&lt;&lt; file }\n</code></pre> <ul> <li>Push file</li> </ul> <p>Same as pull:</p> <pre><code>// webdriver.io\ndriver.pushFile('@com.apple.Keynote:documents/text.txt', new Buffer(\"Hello World\").toString('base64'));\n</code></pre> <pre><code># ruby_lib_core\n@driver.push_file '@com.apple.Keynote:documents/text.txt', (File.read 'path/to/file')\n</code></pre>"},{"location":"ios-xctest-file-movement/#simulator","title":"Simulator","text":""},{"location":"ios-xctest-file-movement/#format_2","title":"Format","text":"<p>The format of method argument should be the following:</p> <ul> <li><code>@&lt;app_bundle_id&gt;</code> is the application bundle identifier</li> <li><code>optional_container_type</code> is the container type<ul> <li><code>app</code>, <code>data</code>, <code>groups</code> or <code>&lt;A specific App Group container&gt;</code></li> <li>format 2 case is handled as <code>app</code> container</li> </ul> </li> <li><code>path_to_the_file_or_folder_inside_container</code> is the target to push/pull to/from them</li> </ul> <p>format 3 format handles as <code>app</code> container</p>"},{"location":"ios-xctest-file-movement/#example_1","title":"Example","text":"<pre><code>// Java\n// Get AddressBook.sqlitedb in test app package ('app' container)\nbyte[] fileContent = driver.pullFile(\"Library/AddressBook/AddressBook.sqlitedb\");\nPath dstPath = Paths.get(new File(\"/local/path/AddressBook.sqlitedb\"));\nFiles.write(dstPath, fileContent);\n</code></pre>"},{"location":"ios-xctest-file-movement/#references","title":"references","text":"<ul> <li>https://stackoverflow.com/questions/1108076/where-does-the-iphone-simulator-store-its-data</li> <li>https://stackoverflow.com/questions/48884248/how-can-i-add-files-to-the-ios-simulator</li> <li>https://apple.stackexchange.com/questions/299413/how-to-allow-the-files-app-to-save-to-on-my-iphone-or-to-on-my-ipad-in-ios/299565#299565</li> </ul>"},{"location":"ios-xctest-install-certificate/","title":"Self-Signed Certificates","text":"<p>Unfortunately, Apple does not provide any command line options which can help to install self-signed certificate on a real device or Simulator. However, there is over-the-air enrollment technology, which allows the deployment of several entity types, including such certificates, by simply downloading specially prepared configuration files with the built-in web browser. After the configuration is downloaded it can be installed and trusted by going through several simple wizard steps.</p> <ul> <li>mobile: installCertificate</li> </ul>"},{"location":"locator-strategies/","title":"Locator Strategies","text":"<p>XCUITest driver supports the following location strategies in the native context:</p> Name Description Example id, name, accessibility id All these locator types are synonyms and internally get transformed into search by element's <code>name</code> attribute. <code>my name</code> className Performs search by element's <code>type</code> attribute. The full list of supported XCUIElement type names could be found in the official XCTest documentation on XCUIElementType <code>XCUIElementTypeButton</code> -ios predicate string This strategy is mapped to the native XCTest predicate locator. Check the NSPredicate cheat sheet for more details on how to build effective predicate expressions. All the supported element attributes could be used in these expressions. <code>(name == 'done' OR value == 'done') AND type IN {'XCUIElementTypeButton', 'XCUIElementTypeKey'}</code> -ios class chain This strategy is mapped to the native XCTest predicate locator, but with respect to the actual element tree hierarchy. Such locators are basically a supertype of <code>-ios predicate string</code>. Read Class Chain Queries Construction Rules for more details on how to build such locators. <code>**/XCUIElementTypeCell[$name == 'done' OR value == 'done'$]/XCUIElementTypeButton[-1]</code> xpath For elements lookup using the Xpath strategy the driver uses the same XML tree that is generated by the page source API. This means such locators are the slowest (sometimes up to 10x slower) in comparison to the ones above, which all depend on native XCTest primitives, but are the most flexible. Use Xpath locators only if there is no other way to locate the given element. Only Xpath 1.0 is supported. <code>//XCUIElementTypeButton[@value=\\\"Regular\\\"]/parent::*</code> <p>Also, consider checking the How To Achieve The Best Lookup Performance article.</p>"},{"location":"multiple-xcode-versions/","title":"Managing Multiple Xcodes","text":"<p>If you have multiple Xcode installations you may choose which toolset Appium should use with one of two ways:</p>"},{"location":"multiple-xcode-versions/#xcode-select-tool","title":"xcode-select tool","text":"<p>Only available with sudo privileges, affects the whole system.</p> <p>Assuming you want to choose <code>/Applications/Xcode13.app</code>: 1. Set default Xcode.   <pre><code>sudo xcode-select -s /Applications/Xcode13.app/Contents/Developer\n</code></pre> 2. Run Appium (from command line or with GUI).   <pre><code>appium\n</code></pre></p>"},{"location":"multiple-xcode-versions/#environment-variable","title":"Environment variable","text":"<p>No privileges needed, affects only the current shell, so Appium should be started within that shell.</p> <p>Assuming you want to choose <code>/Applications/Xcode12.app</code>: 1. Set <code>DEVELOPER_DIR</code> environment variable.   <pre><code>export DEVELOPER_DIR=/Applications/Xcode12.app/Contents/Developer\n</code></pre> 2. Run Appium from the same shell. <pre><code>appium\n</code></pre></p>"},{"location":"parallel-tests/","title":"Testing in Parallel","text":"<p>It is possible to execute tests in parallel using XCUITest driver. Appium allows to do this on per-process (multiple server processes running on different ports managing single session) or per-request basis (single server process managing multiple sessions, more preferable, uses less resources and ensures better control over running sessions).</p> <p>Note: If you are not going to run your tests in parallel then consider enabling the <code>--session-override</code> Appium server argument. It forces the server to close all pending sessions before a new one could be opened, which allows you to avoid possible issues with such sessions silently running/expiring in the background.</p>"},{"location":"parallel-tests/#important-real-device-capabilities","title":"Important Real Device Capabilities","text":"<ul> <li><code>udid</code> must be a unique device UDID for each parallel session.</li> <li><code>wdaLocalPort</code> must be a unique port number for each parallel session. The default value is <code>8100</code>.</li> <li><code>derivedDataPath</code> set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.</li> <li><code>mjpegServerPort</code> must be a unique port number for each parallel session if you are going to record a video stream from it. The default value is <code>9100</code>.</li> </ul>"},{"location":"parallel-tests/#important-simulator-capabilities","title":"Important Simulator Capabilities","text":"<ul> <li>Either <code>udid</code>, which is the unique simulator UDID for each parallel session (it could be retrieved from <code>xcrun simctl list</code> command output),   or a unique combination of <code>deviceName</code> and <code>platformVersion</code> capabilities to identify the appropriate simulator with the given name and version number for each parallel session.</li> <li><code>wdaLocalPort</code> must be a unique port number for each parallel session. The default value is <code>8100</code>.</li> <li><code>derivedDataPath</code> set the unique derived data path root for each driver instance. This will help to avoid possible conflicts and to speed up the parallel execution.</li> <li><code>mjpegServerPort</code> must be a unique port number for each parallel session if you are going to record a video stream from it. The default value is <code>9100</code>.</li> </ul>"},{"location":"real-device-config/","title":"Real Device Configuration","text":""},{"location":"real-device-config/#basic-automatic-configuration","title":"Basic (automatic) configuration","text":"<p>The easiest way to get up-and-running with Appium's XCUITest support on iOS real devices is to use the automatic configuration strategy. There are two ways to do this:</p> <ul> <li>Use the <code>xcodeOrgId</code> and <code>xcodeSigningId</code> capabilities: <pre><code>    {\n\"xcodeOrgId\": \"&lt;Team ID&gt;\",\n\"xcodeSigningId\": \"iPhone Developer\"\n}\n</code></pre></li> <li>Create a <code>.xcconfig</code> file somewhere on your file system and add the following to it: <pre><code>    DEVELOPMENT_TEAM = &lt;Team ID&gt;\nCODE_SIGN_IDENTITY = iPhone Developer\n</code></pre> In either case, the Team ID is a unique 10-character string generated by Apple that is assigned to your team. You can find your Team ID using your developer account. Sign in to developer.apple.com/account, and click Membership in the sidebar. Your Team ID appears in the Membership Information section under the team name. You can also find your team ID listed under the \"Organizational Unit\" field in your iPhone Developer certificate in your keychain.</li> </ul> <p>Note that these are mutually exclusive strategies; use either the <code>xcodeConfigFile</code> capability or the combination of <code>xcodeOrgId</code> and <code>xcodeSigningId</code>.</p> <p>Once this configuration is done, it should just be a matter of starting your test specifying a real device in your <code>udid</code> desired capability.</p> <p>If this has not worked it will usually manifest itself in the Appium server logs as some error followed by <code>info XCUITest xcodebuild exited with code '65' and signal 'null'</code>. This usually means that the necessary code signing is not set up correctly. Go on to the Basic (manual) configuration to fix.</p> <p>If the <code>WebDriverAgentRunner</code> is successfully installed on the device, but in the Appium logs there is an error message something like: <pre><code>2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=com.apple.platform.iphoneos Code=-12 \"Unable to launch com.apple.test.WebDriverAgentRunner-Runner\" UserInfo={NSLocalizedDescription=Unable to launch com.apple.test.WebDriverAgentRunner-Runner, NSUnderlyingError=0x7fa839cadc60 {Error Domain=DTXMessage Code=1 \"(null)\" UserInfo={DTXExceptionKey=The operation couldn\u2019t be completed. Unable to launch com.apple.test.WebDriverAgentRunner-Runner because it has an invalid code signature, inadequate entitlements or its profile has not been explicitly trusted by the user. : Failed to launch process with bundle identifier 'com.apple.test.WebDriverAgentRunner-Runner'}}}\n2017-01-24 09:02:18.358 xcodebuild[30385:339674] Error Domain=IDETestOperationsObserverErrorDomain Code=5 \"Early unexpected exit, operation never finished bootstrapping - no restart will be attempted\" UserInfo={NSLocalizedDescription=Early unexpected exit, operation never finished bootstrapping - no restart will be attempted}\n\nTesting failed:\n    Test target WebDriverAgentRunner encountered an error (Early unexpected exit, operation never finished bootstrapping - no restart will be attempted)\n</code></pre> The problem is that the developer is not trusted on the device. If you manually try to run the <code>WebDriverAgentRunner</code> app on the device, you will see a popup message:</p> <p></p> <p>You can go to Settings =&gt; General =&gt; Device Management on the device to trust the developer and allow the <code>WebDriverAgentRunner</code> app to be run (see Apple documentation for more information).</p>"},{"location":"real-device-config/#basic-manual-configuration","title":"Basic (manual) configuration","text":"<p>There are many cases in which the basic automatic configuration is not enough. This usually has to do with code signing and the configuration of the project to be able to be run on the real device under test. Often this happens when the development account being used is a \"Free\" one, in which case it is not possible to create a wildcard provisioning profile, and will often not create one for the default application bundle.</p> <p>This will manifest as something like an error that Xcode failed to create provisioning profile:</p> <p></p> <p>The easiest way around this is to create a provisioning profile by opening Xcode and creating a new project:</p> <p></p> <p>The type does not matter, other than it being \"iOS\". \"Single View Application\" is the easiest:</p> <p></p> <p>The important part is to use a unique \"Product Name\" and \"Organization Name\". Also, at this point, specify your \"Team\".</p> <p></p> <p>You can confirm that the provisioning profile was created by looking at the \"Project\" tab:</p> <p></p> <p>Or by going into your account preferences and seeing the provisioning profile:</p> <p></p> <p>At this point you have a valid provisioning profile. Make note of the bundle id you associated with it, and add that in the <code>updatedWDABundleId</code> desired capability for your tests. Then follow the initial instructions for automatic configuration.</p>"},{"location":"real-device-config/#full-manual-configuration","title":"Full manual configuration","text":"<p>Alternatively, the provisioning profile can be manually associated with the project (keep in mind that this will have to be done each time the <code>WebDriverAgent</code> is updated, and is not recommended):</p> <ul> <li>Read Finding WebDriverAgent project root on the local file system to locate where WebDriverAgent     is installed.     You could also see the full path to WebDriverAgent's folder in Appium server logs     after a session has been started.     Open a terminal and go to that location, then run the following to     set the project up: <pre><code>    mkdir -p Resources/WebDriverAgent.bundle\n</code></pre> If you build WebDriverAgent with a version before 2.32.0 (e.g. as part of an Appium release before 1.20.0) you also have to run <pre><code>    ./Scripts/bootstrap.sh -d\n</code></pre></li> <li> <p>Open <code>WebDriverAgent.xcodeproj</code> in Xcode. For both the <code>WebDriverAgentLib</code>     and <code>WebDriverAgentRunner</code> targets, select \"Automatically manage signing\"     in the \"General\" tab, and then select your <code>Development Team</code>. This     should also auto select <code>Signing Ceritificate</code>. The outcome should look as     shown below:     </p> <ul> <li>Xcode may fail to create a provisioning profile for the <code>WebDriverAgentRunner</code>   target:</li> </ul> <p></p> <ul> <li>This necessitates manually changing the bundle id for the target by going   into the \"Build Settings\" tab, and changing the \"Product Bundle Identifier\"   from <code>com.facebook.WebDriverAgentRunner</code> to something that Xcode will accept:</li> </ul> <p></p> <ul> <li>Going back to the \"General\" tab for the <code>WebDriverAgentRunner</code> target, you   should now see that it has created a provisioning profile and all is well:</li> </ul> <p></p> </li> <li> <p>Finally, you can verify that everything works. Build the project: <pre><code>    xcodebuild build-for-testing test-without-building -project WebDriverAgent.xcodeproj -scheme WebDriverAgentRunner -destination 'id=&lt;udid&gt;'\n</code></pre> If this was successful, the output should end with something like: <pre><code>    Test Suite 'All tests' started at 2017-01-23 15:49:12.585\n    Test Suite 'WebDriverAgentRunner.xctest' started at 2017-01-23 15:49:12.586\n    Test Suite 'UITestingUITests' started at 2017-01-23 15:49:12.587\n    Test Case '-[UITestingUITests testRunner]' started.\n        t =     0.00s     Start Test at 2017-01-23 15:49:12.588\n        t =     0.00s     Set Up\n</code></pre></p> </li> <li>To completely verify, you can try accessing the <code>WebDriverAgent</code> server status     (note: you must be on the same network as the device, and know its IP     address, from Settings =&gt; Wi-Fi =&gt; Current Network): <pre><code>    export DEVICE_URL='http://&lt;device IP&gt;:8100'\n    export JSON_HEADER='-H \"Content-Type: application/json;charset=UTF-8, accept: application/json\"'\n    curl -X GET $JSON_HEADER $DEVICE_URL/status\n</code></pre> You ought to get back output something like this: <pre><code>    {\n\"value\" : {\n\"state\" : \"success\",\n\"os\" : {\n\"name\" : \"iOS\",\n\"version\" : \"10.2\"\n},\n\"ios\" : {\n\"simulatorVersion\" : \"10.2\",\n\"ip\" : \"192.168.0.7\"\n},\n\"build\" : {\n\"time\" : \"Jan 23 2017 14:59:57\"\n}\n},\n\"sessionId\" : \"8951A6DD-F3AD-410E-A5DB-D042F42F68A7\",\n\"status\" : 0\n}\n</code></pre></li> </ul>"},{"location":"real-device-config/#build-for-generic-iostvos-devices-run-manually","title":"Build for Generic iOS/tvOS devices, run manually","text":"<p>Alternatively, you can build <code>WebDriverAgentRunner</code> for a generic iOS/tvOS device, and install the generated <code>.app</code> package to a real device. Building for a generic device means the package could be installed on any iOS or tvOS device depending on the chosen platform.</p> <pre><code># iOS\n$ xcodebuild clean build-for-testing -project WebDriverAgent.xcodeproj -derivedDataPath appium_wda_ios -scheme WebDriverAgentRunner -destination generic/platform=iOS CODE_SIGNING_ALLOWED=YES\n\n# tvOS\n$ xcodebuild clean build-for-testing -project WebDriverAgent.xcodeproj -derivedDataPath appium_wda_tvos -scheme WebDriverAgentRunner_tvOS -destination generic/platform=tvOS CODE_SIGNING_ALLOWED=YES\n</code></pre> <p>On successful completion the resulting package <code>WebDriverAgentRunner-Runner.app</code> should be located in <code>Build/Products/Debug-iphoneos/</code> subfolder under WebDriverAgent sources root, or in the path provided as <code>derivedDataPath</code> argument.</p> <p>Note Please make sure the <code>WebDriverAgent.xcodeproj</code> has codesigning properties configured properly according to the above description if the build action fails. For example, you may need to configure the bundle id for the provisioning profile properly.</p> <p>The <code>WebDriverAgentRunner-Runner.app</code> can be installed to any real device allowed by the provisioning profile.</p> <p>You can install the package with 3rd party tools and manage it separately as explained in How To Set Up And Customize WebDriverAgent Server. If the codesign is not correct, the installation will fail because of the package verification error by iOS.</p> <p>As a more advanced method, you can generate the package with <code>CODE_SIGNING_ALLOWED=NO</code> and do <code>codesign</code> separately by yourself. This would make the device management more flexible, but you'd need to know about advanced codesign usage scenarios.</p> <p>Note Generic builds with <code>CODE_SIGNING_ALLOWED=NO</code> are available for each version tag at https://github.com/appium/WebDriverAgent/releases. It is recommended to sign packages with a wildcard (<code>*</code>) provisioning profile. Such profiles require a paid Apple Developer account. In case of a free account, you may need to update bundle id properly before building the WebDriverAgent package.</p>"},{"location":"real-device-config/#create-an-offline-provisioning-profile","title":"Create an Offline Provisioning Profile","text":"<p>Apple requires a device to have a live internet connection to trust the code sign properly since iOS 16. An offline enabled provisiong profile allows you to avoid the limitation. Please read this issue regarding detailed configuration steps.</p>"},{"location":"real-device-config/#finding-webdriveragent-project-root-on-the-local-file-system","title":"Finding WebDriverAgent project root on the local file system","text":"<p>WebDriverAgent Xcode project is bundled with appium-webdriveragent NPM module. This means as soon as you could find WDA location on the local file system as soon as you know where this npm module has been installed. The module is a direct dependency of appium-xcuitest-driver. The actual location of the module on the file system depends on major Appium version and on the way used to install Appium or XCUITest itself. All the below tutorials assume that you use NPM (Node Package Manager) to install Appium. We do not officially support other package managers, like yarn or brew, so the actual behavior might be different if you still use them.</p>"},{"location":"real-device-config/#appium-1x","title":"Appium 1.x","text":"<p>XCUITest driver is the default dependency of Appium 1.x package, so WDA must be located under Appium's installation root. Depending on whether Appium has been installed globally or locally, the package could be find either in a local or a global <code>node_modules</code> root. Check Where does npm install packages? Find the install path article for more details. As soon as you find where <code>appium</code> package is located then simply run the lookup for <code>WebDriverAgent.xcodeproj</code> in it. For example, if Appium has been installed globally, then the following commands could be used:</p> <pre><code>npm i -g appium@1.22.3\necho \"$(dirname \"$(find \"$(npm root -g)/appium/node_modules\" -name WebDriverAgent.xcodeproj)\")\"\n</code></pre> <p>The resulting output will contain the full path to WDA's source folder.</p>"},{"location":"real-device-config/#appium-2x","title":"Appium 2.x","text":"<p>In Appium 2.x the server and drivers are separated, so you won't find WDA sources in the same package where the server is installed. WDA sources only get fetched as soon as XCUITest driver is installed using the server CLI, e.g. <code>appium driver install xcuitest</code>. Appium server CLI by default installs the driver package using NPM and uses APPIUM_HOME folder as the root. By default, APPIUM_HOME points to <code>$HOME/.appium</code>. It could also be customized by providing the corresponding CLI argument. As soon as the driver installation is completed and default values were used the WDA path could be found in one of <code>APPIUM_HOME</code> subfolders:</p> <pre><code>appium driver install xcuitest\necho \"$(dirname \"$(find \"$HOME/.appium\" -name WebDriverAgent.xcodeproj)\")\"\n</code></pre> <p>The resulting output will contain the full path to WDA's source folder.</p> <p>Since XCUITest driver v4.13.0 there is a possibility to open <code>WebDriverAgent.xcodeproj</code> in Xcode by simply executing <code>appium driver run xcuitest open-wda</code> command.</p>"},{"location":"run-prebuilt-wda/","title":"Run Prebuilt WebDriverAgentRunner","text":"<p><code>xcodebuild</code> has commands; <code>build-for-testing</code> and <code>test-without-building</code>. <code>build-for-testing</code> builds a test bundle package. <code>test-without-building</code> is to run it. Usually XCUITest driver runs both arguments in a new session creation to build the WebDriverAgentRunner application for testing, install it to a device and run it.</p> <p>For instance, XCUITEst driver issues a <code>xcodebuild</code> command like below:</p> <pre><code>xcodebuild build-for-testing test-without-building \\\n  -project WebDriverAgent.xcodeproj \\\n  -derivedDataPath wda_build \\\n  -scheme WebDriverAgentRunner \\\n  -destination \"platform=iOS Simulator,name=iPhone 14 Pro\" \\\n  CODE_SIGNING_ALLOWED=NO\n</code></pre> <p>Then, the <code>xcodebuild</code> command builds the <code>WebDriverAgent.xcodeproj</code> and starts the built package for testing.</p> <p>The command can split for <code>build-for-testing</code> part and <code>test-without-building</code> part as below:</p> <pre><code>xcodebuild build-for-testing \\\n  -project WebDriverAgent.xcodeproj \\\n  -derivedDataPath wda_build \\\n  -scheme WebDriverAgentRunner \\\n  -destination \"platform=iOS Simulator,name=iPhone 14 Pro\" \\\n  CODE_SIGNING_ALLOWED=NO\n</code></pre> <pre><code>xcodebuild test-without-building \\\n  -xctestrun wda_build/Build/Products/WebDriverAgentRunner_iphonesimulator16.2-arm64.xctestrun \\\n  -destination \"platform=iOS Simulator,name=iPhone 14 Pro\"\n</code></pre> <p>In the <code>build-for-testing</code> part, it generates <code>.app</code> package and <code>.xctestrun</code> file as below:</p> <pre><code>wda_build/Build/Products/Debug-iphonesimulator/WebDriverAgentRunner-Runner.app\n                        /WebDriverAgentRunner_iphonesimulator16.2-arm64.xctestrun\n</code></pre> <p>The <code>.xctestrun</code> file name depends on the <code>-destination</code> preference. The file has metadata about the package.</p> <p>In the <code>test-without-building</code> part, it starts the WebDriverAgentRunner application for testing by referencing the given <code>.xctestrun</code>. The file has <code>DependentProductPaths</code> key to manage dependencies for <code>WebDriverAgentRunner-Runner.app</code> built by the <code>build-for-testing</code> for example.</p> <p>After succeeding in starting the WebDriverAgentRunner application for testing, <code>http://localhost:8100</code> will be accessible during the command running for iPhone 14 Pro simulator.</p> <p>XCUITest driver provides <code>useXctestrunFile</code> and <code>bootstrapPath</code> capabilities to conduct the <code>test-without-building</code> command only. It will improve WebDriverAgentRunner application setup performance by skipping the <code>build-for-testing</code>.</p> <p>This method can use both real devices and simulators, but the real device requires proper signing as Run Preinstalled WebDriverAgentRunner.</p> <p>We would recommend to use <code>useXctestrunFile</code> for real devices since the above <code>test-without-building</code> needs to install the WebDriverAgentRunner package every session creation but the <code>useXctestrunFile</code> does not.</p>"},{"location":"run-prebuilt-wda/#how-to-use-appiumusexctestrunfile-and-appiumbootstrappath-capabilities","title":"How to use <code>appium:useXctestrunFile</code> and <code>appium:bootstrapPath</code> capabilities","text":"<p>Based on the above case, the usage of <code>useXctestrunFile</code> and <code>bootstrapPath</code> will be:</p> <pre><code>{\n\"platformName\": \"ios\",\n\"appium:automationName\": \"xcuitest\",\n\"appium:platformVersion\": \"15.5\",\n\"appium:deviceName\": \"iPhone 12\",\n\"appium:useXctestrunFile\": \"true\",\n\"appium:bootstrapPath\": \"/path/to/wda_build/Build/Products\"\n}\n</code></pre> <p>We haven't tested all possible combinations, but probably the target device could be anything.</p> <p>The same thing could achieve with <code>derivedDataPath</code> and <code>usePrebuiltWDA</code> capabilities, but it may fail if the <code>xcodebuild</code> cannot find or handle the <code>.xctestrun</code> properly. The stability depends on Xcode.</p>"},{"location":"run-preinstalled-wda/","title":"Run Preinstalled WebDriverAgentRunner","text":"<p>XCUITest driver can launch preinstalled WebDriverAgent directly against a real device. It lets you to start a XCUITest driver session without the <code>xcodebuild</code> command execution to improve the session startup performance.</p>"},{"location":"run-preinstalled-wda/#for-real-devices","title":"For Real Devices","text":""},{"location":"run-preinstalled-wda/#capabilities","title":"Capabilities","text":"<ul> <li>Required<ul> <li><code>appium:usePreinstalledWDA</code></li> </ul> </li> <li>Optional<ul> <li><code>appium:updatedWDABundleId</code></li> <li><code>appium:prebuiltWDAPath</code></li> </ul> </li> </ul>"},{"location":"run-preinstalled-wda/#example-steps-with-xcode","title":"Example steps with Xcode","text":"<ol> <li>Run <code>WebDriverAgentRunner</code> scheme with Xcode as Test and stop it<ul> <li>Please read Install WebDriverAgent With Xcode below</li> </ul> </li> <li>Start an Appium server process</li> <li>Start a XCUITest driver session with the capabilities below:</li> </ol> <pre><code>appium\n</code></pre> <pre><code># Ruby\ncapabilities: {\n\"platformName\": \"ios\",\n\"appium:automationName\": \"xcuitest\",\n\"appium:udid\": \"&lt;udid&gt;\",\n\"appium:usePreinstalledWDA\": true,\n\"appium:updatedWDABundleId\": \"com.appium.WebDriverAgentRunner\"\n}\n@core = Appium::Core.for capabilities: capabilities\ndriver = @core.start_driver\n# do something\ndriver.quit\n</code></pre> <p>If the <code>&lt;udid&gt;</code> device has a WebDriverAgent package with <code>com.appium.WebDriverAgentRunner.xctrunner</code> bundle id, the session will launch the WebDriverAgent process without xcodebuild.</p> <p>Note Please ensure that the WebDriverAgent-Runner application is launchable before starting a XCUITest driver session. For example, whether the provisioning profile is trusted by the system.</p>"},{"location":"run-preinstalled-wda/#install-webdriveragent","title":"Install WebDriverAgent","text":""},{"location":"run-preinstalled-wda/#with-xcode","title":"With Xcode","text":"<p>Running test of WebDriveragent package with Xcode is the easiest way to prepare the device environment. The steps are:</p> <ol> <li>Open WebDriverAgent project in Xcode<ul> <li><code>appium driver run xcuitest open-wda</code> command after installing XCUITest driver may help</li> </ul> </li> <li>Select <code>WebDriverAgentRunner</code> scheme<ul> <li><code>WebDriverAgentRunner_tvOS</code> for tvOS</li> </ul> </li> <li>Chose the target device</li> <li>Run test via <code>Product</code> -&gt; <code>Test</code> from the menu bar</li> </ol> <p>Please read Real Device Configuration tutorial to configure the WebDriverAgent package for a real device before the step 4.</p> <p>If it is a non-paid account by <code>appium</code> user name, the bundle id would have <code>com.appium</code> prefix. Then, the WebDriverAgent-Runner's bumdle id could be <code>com.appium.WebDriverAgentRunner</code> for example. <code>appium:updatedWDABundleId</code> value should be <code>com.appium.WebDriverAgentRunner</code> then. The test bundle by Xcode will be <code>com.appium.WebDriverAegnt.xctrunner</code>.</p> <p>Note Older than Xcode 11 has different naming convention. This feature does not work for a package which is built by Xcode versions below 12 have different naming conventions.</p> <p>Note Please make sure that the installed <code>WebDriverAgentRunner-Runner</code> application is still launchable if the XCUITest driver session startup still fails by providing a correct WebDriverAgent bundle identifier. For example, non-paid account has limited period to keep the provisiong profile valid. Sometimes it is necessary to reinstall WebDriverAgentRunner-Runner once, or to restart the device.</p>"},{"location":"run-preinstalled-wda/#with-3rd-party-tools","title":"With 3rd party tools","text":"<p>Some 3rd party tools such as ios-deploy, go-ios and tidevice can install the built WebDriverAgent package.</p> <p><code>WebDriverAgentRunner-Runner.app</code> package may exist in a <code>derivedDataPath</code> directory as explained in Real Device Configuration tutorial. The <code>WebDriverAgentRunner-Runner.app</code> can be installed without xcodebuild with the 3rd party tools.</p>"},{"location":"run-preinstalled-wda/#set-appiumprebuiltwdapath","title":"Set <code>appium:prebuiltWDAPath</code>","text":"<p>If <code>appium:prebuiltWDAPath</code> is provided with properly signed <code>WebDriverAgentRunner-Runner.app</code> test bundle (please check Real Device Configuration tutorial), XCUITest driver will install the application and launch it every test session. Test bundles cannot be versioned using <code>CFBundleVersion</code> as vanilla applications do. That is why it is necessary to (re)install them for every test session.</p> <p>Usually you can find the actual WebDriverAgentRunner application bundle at the below location if you use Xcode to build it.</p> <pre><code>~/Library/Developer/Xcode/DerivedData/WebDriverAgent-&lt;random string&gt;/Build/Products/Debug-iphoneos/WebDriverAgentRunner-Runner.app\n</code></pre> <p>Then, the capabilities will be:</p> <pre><code># Ruby\ncapabilities: {\n\"platformName\": \"ios\",\n\"appium:automationName\": \"xcuitest\",\n\"appium:udid\": \"&lt;udid&gt;\",\n\"appium:usePreinstalledWDA\": true,\n\"appium:prebuiltWDAPath\": \"/path/to/Library/Developer/Xcode/DerivedData/WebDriverAgent-&lt;random string&gt;/Build/Products/Debug-iphoneos/WebDriverAgentRunner-Runner.app\"\n}\n@core = Appium::Core.for capabilities: capabilities\ndriver = @core.start_driver\n# do something\ndriver.quit\n</code></pre>"},{"location":"security-flags/","title":"Security Feature Flags","text":"<p>These can be enabled when running this driver through Appium, via the <code>--allow-insecure</code> or <code>--relaxed-security</code> flags.</p> Feature Name Description shutdown_other_sims Allow any session to use a capability to shutdown any running simulators on the host perf_record Allow recording the system performance and other metrics of the simulator audio_record Allow recording of host audio input(s) customize_result_bundle_path Allow customization of paths to result bundles by <code>resultBundlePath</code> capability"},{"location":"server-args/","title":"Appium Server Arguments","text":"<p>These arguments are set when you launch the Appium server, with this driver installed. They are for system administrators.</p> <p>Usage: <code>appium --driver-args='{\"xcuitest\": {[argName]: [argValue]}}'</code></p> <p> Argument Default Description Example wdaLocalPort 8100 Local port used for communication with ios-web-driver-agent <code>--driver-args='{\"xcuitest\": {\"wdaLocalPort\": 8100}}'</code>"},{"location":"settings/","title":"Settings","text":"<p>XCUITest driver supports Appium Settings API. Along with the common settings the following driver-specific settings are currently available:</p> Name Type Description elementResponseAttributes string Comma-separated list of element attribute names to be included into findElement response. By default only element UUID is present there, but it is also possible to add the following items: <code>name</code>, <code>text</code>, <code>rect</code>, <code>enabled</code>, <code>displayed</code>, <code>selected</code>, <code>attribute/&lt;element_attribute_name&gt;</code>. It is required that <code>shouldUseCompactResponses</code> setting is set to <code>false</code> in order for this one to apply. shouldUseCompactResponses boolean Used in combination with <code>elementResponseAttributes</code> setting. If set to <code>false</code> then the findElement response is going to include the items enumerated in <code>elementResponseAttributes</code> setting. <code>true</code> by default screenshotQuality int See the description of the corresponding capability. mjpegServerFramerate int The maximum count of screenshots per second taken by the MJPEG screenshots broadcaster. Must be in range 1..60. <code>10</code> by default mjpegScalingFactor int The percentage value used to apply downscaling on the screenshots generated by the MJPEG screenshots broadcaster. Must be in range 1..100. <code>100</code> is by default, which means that screenshots are not downscaled. mjpegServerScreenshotQuality int The percentage value used to apply lossy JPEG compression on the screenshots generated by the MJPEG screenshots broadcaster. Must be in range 1..100. <code>25</code> is by default, which means that screenshots are compressed to the quarter of their original quality. customSnapshotTimeout (snapshotTimeout before 1.19.1) float Set how much time in float seconds is allowed to resolve a single accessibility snapshot with custom attributes. Snapshots are mainly used for page source generation, XML lookup and custom attributes retrieval (these are visibility and accessibility ones). It might be necessary to increase this value if the actual page source is very large and contains hundreds of UI elements. Defaults to 15 seconds. Since Appium 1.19.1 if this timeout expires and no custom snapshot could be made then WDA tries to calculate the missing attributes using its own algorithms, so setting this value to zero might speed up, for example, page source retrieval, but for the cost of preciseness of some element attributes. waitForIdleTimeout float Has the same meaning as corresponding capability (see above) animationCoolOffTimeout float The amount of time in float seconds to wait until the application under test does not have any active animations. This check is usually applied after each automation action that is supposed to change the state of the application under test, like <code>click</code> one, and blocks XCTest until the transition of the tested application to a new state completes or the cool off timeout occurs. The default value is <code>2</code> (seconds). Setting it to zero disables animation checks completely. snapshotMaxDepth int Changes the value of maximum depth for traversing elements source tree. It may help to prevent out of memory or timeout errors while getting the elements source tree, but it might restrict the depth of source tree. Please consider restricting this value if you observed an error like Timed out snapshotting com.apple.testmanagerd... message or Cannot get 'xml' source of the current application in your Appium log since they are possibly timeout related. A part of elements source tree might be lost if the value was too small. Defaults to <code>50</code> useFirstMatch boolean Enabling this setting makes single element lookups faster, but there is the known problem related to nested elements lookup. Defaults to <code>false</code>. reduceMotion boolean Changes the 'reduce motion' preference of accessibility feature. Defaults to <code>false</code> defaultActiveApplication string Sets the hint for active application selection. This helps WebDriverAgent to select the current application if there are multiple items in the active applications list and the desired one is also one of them. The setting is particularly useful for split-screen apps automation. Defaults to <code>auto</code>, which makes WebDriverAgent to select the application whose element is located at <code>screenPoint</code> location or a single item from the active apps list if the length of this list is equal to one. activeAppDetectionPoint string Defines the coordinates of the current screen point. WebDriverAgent uses this point to detect the active application if multiple application are active on the screen. The format of this value is <code>x,y</code>, where x and y are float or integer numbers representing valid screen coordinates. Setting this value to a point outside the actual screen coordinates might corrupt WebDriverAgent functionality. By default the screen point coordinates equal to 20% of the minimum screen dimension each, e.g. <code>MIN(w, h) * 0.2, MIN(w, h) * 0.2</code> includeNonModalElements boolean Whether returns all of elements including no modal dialogs on iOS 13+. It fixes cannot find elements on nested modal presentations, but it might make visibility attributes unreliable. You could also enable <code>shouldUseTestManagerForVisibilityDetection</code> setting (defaults to <code>false</code>) or <code>simpleIsVisibleCheck</code> capability to improve the visibility detection. This issue may happen between iOS 13.0 to 13.2 (Xcode 11.0 to 11.2). The query issued in <code>includeNonModalElements</code> returns <code>nil</code> with newer iOS/Xcode versions and Appium/WDA return proper elements three without this setting being used. Defaults to <code>false</code>. acceptAlertButtonSelector string Allows to customize accept alert button selector. It helps you to handle an arbitrary element as accept button in <code>accept alert</code> command. The selector should be a valid class chain expression, where the search root is the alert element itself. The default button location algorithm is used if the provided selector is wrong or does not match any element. Example: <code>**/XCUIElementTypeButton[`label CONTAINS[c] 'accept'`]</code> dismissAlertButtonSelector string Allows to customize dismiss alert button selector. It helps you to handle an arbitrary element as dismiss button in <code>dismiss alert</code> command. The selector should be a valid class chain expression, where the search root is the alert element itself. The default button location algorithm is used if the provided selector is wrong or does not match any element. Example: <code>**/XCUIElementTypeButton[`label CONTAINS[c] 'dismiss'`]</code> screenshotOrientation string Adjust screenshot orientation for iOS. Appium tries to return a screenshot and adjust its orientation properly using internal heuristics, but sometimes it does not work, especially in landscape mode. The actual screenshot orientation depends on various factors such as OS versions, model versions and whether this is a real or simulator device. This option allows you to enforce the given image orientation. Acceptable values: <code>auto</code> (default), <code>portrait</code>, <code>portraitUpsideDown</code>, <code>landscapeRight</code>, <code>landscapeLeft</code>. boundElementsByIndex boolean Whether to look up elements with <code>allElementsBoundByAccessibilityElement</code> (default) or <code>allElementsBoundByIndex</code>. This Stack Overflow topic explains the differences. Defaults to <code>false</code>. keyboardAutocorrection boolean Changes the 'Auto-Correction' preference in Keyboards setting. Defaults to <code>false</code>. keyboardPrediction boolean Changes the 'Predictive' preference in Keyboards setting. Defaults to <code>false</code>. nativeWebTap boolean See the description of the corresponding capability. nativeWebTapStrict boolean See the description of the corresponding capability. nativeWebTapTabBarVisibility enum Bypass finding whether the existence of the tab bar before tapping on the element. It could make native web tap faster. If it's <code>visible</code>, tab bar offset will be added without checking the existence of the tab bar. It's <code>invisible</code>, the tab bar offset will be <code>zero</code>. If you want to leave Appium to check and measure the tab bar offset, unset or set <code>detect</code>. Only applicable if <code>nativeWebTap</code> and <code>nativeWebTapStrict</code> are enabled. Unset by default. nativeWebTapSmartAppBannerVisibility enum The same as <code>nativeWebTapTabBarVisibility</code>, this keyword will bypass finding whether the existence of the smart app banner. safariTabBarPosition string Handle offset of Safari tab bar in <code>nativeWebTap</code> enabled interactions. If <code>platformVersion</code> was greater than or equal to 15 and iPhone device, the value is <code>bottom</code> by default. Otherwise <code>top</code>. When the value is <code>top</code>, Appium considers offset as the bar length. iOS 15+ environment can customize the bar position in the settings app, so please adjust the offset with this. Acceptable values: <code>bottom</code>, <code>top</code> useJSONSource boolean See the description of the corresponding capability."},{"location":"setup/","title":"Setup & Requirements","text":""},{"location":"setup/#installation","title":"Installation","text":"<p>Note</p> <p>Since version 4.0.0 XCUITest driver has dropped the support of Appium 1, and is only compatible with Appium 2.</p> <p>Use the Appium extension CLI to add this driver to your Appium 2 install:</p> <pre><code>appium driver install xcuitest\n</code></pre> <p>Alternatively, if you are running a Node.js project, you can include <code>appium-xcuitest-driver</code> as one of your dependencies.</p>"},{"location":"setup/#requirements","title":"Requirements","text":"<p>On top of standard Appium requirements XCUITest driver also expects the following prerequisites:</p> <ul> <li>Only macOS is supported as the host platform</li> <li>Xcode and developer tools must be installed. Note, that usually some time is needed for the Appium team to pick up with the support of the most recent Xcode versions, especially beta ones (check Xcode version support section below).</li> <li>Connected real devices must be trusted, added to your developer profile and configured properly along with WebDriverAgent signing. Read Real devices section carefully to set them up properly before running your tests.</li> <li>iOS/iPadOS 16 real devices require enabling developer mode. Please read Enabling Developer Mode on a device for more details. <code>devmodectl streaming</code> CLI on macOS 13+ and installing development signed apps also help enabling the mode.</li> <li>Consider using earlier releases of the driver (check Xcode version support section below) if it is necessary to test iOS versions older than the current iOS major version minus one on real devices. Also, it is highly recommended to always use the same major version of Xcode SDK, which was used to build the particular iOS/tvOS version on your real device under test (for example Xcode 11 for iOS 13, Xcode 12 for iOS 14, etc).</li> <li>Web views must be debuggable in order to test them. If it is not possible to connect to your web view(s) using Safari remote debugger then XCUITest won't be able to connect to them as well.</li> <li>Since version 3.33.0 (included into Appium 1.20.0+) of XCUITest driver the Carthage dependency is not needed anymore. Prior to that version it was required and could be installed using brew: <code>brew install carthage</code>.</li> </ul>"},{"location":"setup/#optional-dependencies","title":"Optional dependencies","text":"<ul> <li>xcpretty tool could be used to make Xcode output easier to read. It could be installed using <code>gem install xcpretty</code> command.</li> <li>For test video recording we use ffmpeg. It could be installed using brew: <code>brew install ffmpeg</code></li> <li>IDB, go-ios and tidevice could be used to improve some real device/Simulator interactions</li> <li>WIX AppleSimulatorUtils could be used to improve some Simulator interactions</li> <li>py-ios-device is required in several <code>mobile:</code> extensions and to improve the general testing experience for real iOS devices</li> </ul>"},{"location":"setup/#xcode-version-support","title":"Xcode version support","text":"<p>Apple constantly works on various updates/improvements to XCTest framework. Thus, some major and even minor iOS releases might partially break the backward compatibility, so we need to implement multiple branches to support the legacy and the current implementations in WebDriverAgent. Eventually we just drop the support of legacy XCTest implementations in order to simplify the client code and to have access to the recent platform features. The general aim is to support the current major platform version and the previous major one.</p> Minimum XCUITest driver version Minimum required Xcode version 2.96.0 Xcode 9 3.0.0 Xcode 10 3.32.0 Xcode 10.2 3.56.0 Xcode 11 4.2.0 Xcode 12 4.28.0 Xcode 13 <p>It could be that after a new Xcode SDK is released we figure out a part or even the whole functionality that WebDriverAgent currently provides does not work anymore and needs to be updated. The below table contains the driver versions mapping for the cases where we had known compatibility issues with newly released SDKs and addressed them. Basically, version numbers in this table mean that all XCUITest driver versions below the one in the first column won't support Xcode SDK equal or above the version in the second column and the only way to make your test working after Xcode update would be to also bump the driver version.</p> Minimum XCUITest driver version Tested for compatibility with Xcode version 4.7.4 Xcode 14-beta.3 4.21.7 Xcode 14.3"},{"location":"setup/#tvos-support","title":"tvOS Support","text":"<p>Read the tvOS support article to get more details on how to automate testing for this platform.</p>"},{"location":"setup/#real-devices","title":"Real devices","text":""},{"location":"setup/#configuration","title":"Configuration","text":"<p>See the real device configuration documentation.</p>"},{"location":"touch-id/","title":"Touch ID","text":"<p>Appium has the capability to simulate Touch ID on iOS Simulators.</p>"},{"location":"touch-id/#support","title":"Support","text":"<ul> <li>TouchID simulation is only supported in iOS Simulators. It is not possible to simulate touchId on real devices.</li> <li>Not all iOS devices have touchId so your tests should handle the case where touchId is not supported</li> </ul>"},{"location":"touch-id/#configuration","title":"Configuration","text":"<ul> <li>To use touchId, the application that Appium launches from (such as Terminal, AppiumDesktop, or iTerm) must be added to the accessibility preferences on your Mac. Navigate to <code>System Preferences &gt; Security &amp; Privacy &gt; Accessibility</code> and under <code>Allow the apps below to control your computer</code> add the application. (The only way Appium can enable enrollment and toggling of Touch ID is to use system-level accessibility APIs to simulate mouse clicks on the Simulator menus via AppleScript. For this reason this feature requires that you give Appium's running context access to these accessibility APIs).</li> </ul>"},{"location":"touch-id/#usage","title":"Usage","text":"<ul> <li>Set the desired capability <code>allowTouchIdEnroll</code> to true.</li> <li>When the Simulator starts, touch id enrollment will be enabled by default.</li> <li>You can toggle touchId enrollment by calling the client method associated with the endpoint /session/:sessionId/appium/simulator/toggle_touch_id_enrollment</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#known-problems","title":"Known problems","text":"<ul> <li>After many failures on real devices it could transition to a state where connections are no longer being accepted. To possibly remedy this issue reboot the device. Read https://github.com/facebook/WebDriverAgent/issues/507 for more details.</li> <li>iPhone/iPad real devices show overlay, which has <code>Automation Running Hold both volume buttons to stop</code> text, since iOS/iPadOS 15. This is a known limitation of XCTest framework. This limitation does not affect screenshooting APIs though (e.g. the overlay is not visible on taken screenshots).</li> <li>iPhone/iPad real devices require passcode or touch id when they start a XCTest session since iOS/iPadOS 15. Disabling passcode/touch id in the device preference allows to workaround the behaviour above.</li> <li>OpenSSL v3 breaks secure communication with real devices. It can cause a Failed to receive any data within the timeout error in appium-ios-device. Please read this issue for more details.<ul> <li>Please make sure your environment has Open SSL v1 for NodeJS environment, or prepare an OpenSSL v3 build by patching <code>OPENSSL_TLS_SECURITY_LEVEL=1</code>. (e.g. an article)</li> <li>This configuration is only necessary for XCUITest driver v4.3.0 or lower.</li> </ul> </li> <li><code>shake</code> is implemented via AppleScript and works only on Simulator due to lack of support from Apple</li> </ul>"},{"location":"troubleshooting/#weird-state","title":"Weird state","text":"<p>Note: Running <code>WebDriverAgent</code> tests on a real device is particularly flakey. If things stop responding, the only recourse is, most often, to restart the device. Logs in the form of the following may start to occur:</p> <pre><code>info JSONWP Proxy Proxying [POST /session] to [POST http://10.35.4.122:8100/session] with body: {\"desiredCapabilities\":{\"ap...\"\ndbug WebDriverAgent Device: Jul 26 13:20:42 iamPhone XCTRunner[240] &lt;Warning&gt;: Listening on USB\ndbug WebDriverAgent Device: Jul 26 13:21:42 iamPhone XCTRunner[240] &lt;Warning&gt;: Enqueue Failure: UI Testing Failure - Unable to update application state promptly. &lt;unknown&gt; 0 1\ndbug WebDriverAgent Device: Jul 26 13:21:57 iamPhone XCTRunner[240] &lt;Warning&gt;: Enqueue Failure: UI Testing Failure - Failed to get screenshot within 15s &lt;unknown&gt; 0 1\ndbug WebDriverAgent Device: Jul 26 13:22:57 iamPhone XCTRunner[240] &lt;Warning&gt;: Enqueue Failure: UI Testing Failure - App state of (null) is still unknown &lt;unknown&gt; 0 1\n</code></pre>"},{"location":"troubleshooting/#real-device-security-settings","title":"Real device security settings","text":"<p>On some systems, especially CI ones, where tests are executed by a command line agents, macOS Accessibility restrictions make the <code>WebDriverAgent</code> system unable to retrieve the development keys from the system keychain. This is usually manifest by <code>xcodebuild</code> returning an error code <code>65</code>. A workaround for this is to use a private key that is not stored on the system keychain. See this issue and this Stack Exchange post.</p> <p>To export the key, use</p> <pre><code>security create-keychain -p [keychain_password] MyKeychain.keychain\nsecurity import MyPrivateKey.p12 -t agg -k MyKeychain.keychain -P [p12_Password] -A\n</code></pre> <p>where <code>MyPrivateKey.p12</code> is the private development key exported from the system keychain.</p> <p>The full path to the keychain can then be sent to the Appium system using the <code>keychainPath</code> desired capability, and the password sent through the <code>keychainPassword</code> capability.</p>"},{"location":"troubleshooting/#simulator-resetting","title":"Simulator Resetting","text":"<p>By default, this driver will create a new iOS simulator and run tests on it, deleting the simulator afterward.</p> <p>If you specify a specific simulator using the <code>udid</code> capability, this driver will boot the specified simulator and shut it down afterwards.</p> <p>If a udid is provided and the simulator is already running, this driver will leave it running after the test run.</p> <p>In short, this driver tries to leave things as it found them.</p> <p>You can use the <code>noReset</code> capability to adjust this behavior. Setting <code>noReset</code> to <code>true</code> will leave the simulator running at the end of a test session.</p>"},{"location":"troubleshooting/#delete-files-generated-by-test-runs-to-avoid-possible-caching-issue","title":"Delete files generated by test runs to avoid possible caching issue","text":"<p>Testing on iOS generates files that can sometimes get large. These include logs, temporary files, and derived data from Xcode runs. Generally the following locations are where they are found, should they need to be deleted:</p> <pre><code>$HOME/Library/Logs/CoreSimulator/*\n$HOME/Library/Developer/Xcode/DerivedData/*\n</code></pre>"},{"location":"wda-custom-server/","title":"Manage WebDriverAgent by yourself","text":"<p>Appium for iOS uses WebDriverAgent as the automation backend. This backend is based on Apple's XCTest framework and shares all the known problem that are present in XCTest. For some of them we have workarounds, but there are some that are hardly possible to workaround, for example https://github.com/facebookarchive/WebDriverAgent/issues/507. The approach described in this article enables you to have full control over how WDA is built, managed, and run on the device. This way you may fine-tune your automated tests in CI environment and make them more stable in long-running perspective.</p> <p>Important points:  * The steps below are not necessary if default Appium capabilities are used.  The server will do everything for you, however you won't have so much control over WDA.  * It is mandatory to have SSH or physical access to the machine to which the device under test  is connected.</p>"},{"location":"wda-custom-server/#wda-setup","title":"WDA Setup","text":"<p>WebDriverAgent source is automatically downloaded as part of XCUITest driver package. <code>appium driver install xcuitest</code> installes the module in <code>$APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent</code>. <code>APPIUM_HOME</code> is <code>~/.appium</code> by default.</p> <p>Real device requires some more work to be done. Follow Real Device Configuration to setup code signing.</p> <p>In order to make sure that WDA source is configured properly:</p> <ul> <li>Open <code>$APPIUM_HOME/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj</code> in Xcode</li> <li>Select WebDriverAgentRunner project</li> <li>Select your real phone/Simulator you'd like to run automated tests on as build target</li> <li>Select Product-&gt;Test from the main menu</li> </ul> <p>Xcode should successfully build the project and install it on the real device/Simulator, so you'll see the icon of WebDriverAgentRunner application on the springboard.</p>"},{"location":"wda-custom-server/#wda-startup","title":"WDA Startup","text":"<p>WebDriverAgent application acts as a REST server, which proxies external API requests to native XCTest calls for your application under test. The server address will be localhost if you run your tests on Simulator or the actual phone IP address in case of real device. Appium uses appium-ios-device to route network requests to a real device from localhost via USB, which means one can use this tool to unify WDA network address for Simulator and for real device.</p> <p>You can use appium-ios-device to connect to a remote device requiring the module from your JavaScript code as same as Appium. Alternatively, you can also use iproxy, go-ios or tidevice to handle WebDriverAgent process outside Appium by installing and launching the WebDriverAgent package. For instance, <code>iproxy</code> could be installed using npm: <code>npm install -g iproxy</code>.</p> <p>This helper class written in Java illustrates the main implementation details wit iproxy:</p> <pre><code>public class WDAServer {\nprivate static final Logger log = ZLogger.getLog(WDAServer.class.getSimpleName());\nprivate static final int MAX_REAL_DEVICE_RESTART_RETRIES = 1;\nprivate static final Timedelta REAL_DEVICE_RUNNING_TIMEOUT = Timedelta.ofMinutes(4);\nprivate static final Timedelta RESTART_TIMEOUT = Timedelta.ofMinutes(1);\n// These settings are needed to properly sign WDA for real device tests\n// See https://github.com/appium/appium-xcuitest-driver for more details\nprivate static final File KEYCHAIN = new File(String.format(\"%s/%s\",\nSystem.getProperty(\"user.home\"), \"/Library/Keychains/MyKeychain.keychain\"));\nprivate static final String KEYCHAIN_PASSWORD = \"******\";\nprivate static final File IPROXY_EXECUTABLE = new File(\"/usr/local/bin/iproxy\");\nprivate static final File XCODEBUILD_EXECUTABLE = new File(\"/usr/bin/xcodebuild\");\nprivate static final File WDA_PROJECT =\nnew File(\"~/.appium/node_modules/appium-xcuitest-driver/node_modules/appium-webdriveragent\" +\n\"/WebDriverAgent.xcodeproj\");\nprivate static final String WDA_SCHEME = \"WebDriverAgentRunner\";\nprivate static final String WDA_CONFIGURATION = \"Debug\";\nprivate static final File XCODEBUILD_LOG = new File(\"/usr/local/var/log/appium/build.log\");\nprivate static final File IPROXY_LOG = new File(\"/usr/local/var/log/appium/iproxy.log\");\nprivate static final int PORT = 8100;\npublic static final String SERVER_URL = String.format(\"http://127.0.0.1:%d\", PORT);\nprivate static final String[] IPROXY_CMDLINE = new String[]{\nIPROXY_EXECUTABLE.getAbsolutePath(),\nInteger.toString(PORT),\nInteger.toString(PORT),\nString.format(\"&gt; %s 2&gt;&amp;1 &amp;\", IPROXY_LOG.getAbsolutePath())\n};\nprivate static WDAServer instance = null;\nprivate final boolean isRealDevice;\nprivate final String deviceId;\nprivate final String platformVersion;\nprivate int failedRestartRetriesCount = 0;\nprivate WDAServer() {\ntry {\nthis.isRealDevice = !getIsSimulatorFromConfig(getClass());\nfinal String udid;\nif (isRealDevice) {\nudid = IOSRealDeviceHelpers.getUDID();\n} else {\nudid = IOSSimulatorHelpers.getId();\n}\nthis.deviceId = udid;\nthis.platformVersion = getPlatformVersionFromConfig(getClass());\n} catch (Exception e) {\nthrow new RuntimeException(e);\n}\nensureToolsExistence();\nensureParentDirExistence();\n}\npublic synchronized static WDAServer getInstance() {\nif (instance == null) {\ninstance = new WDAServer();\n}\nreturn instance;\n}\nprivate boolean waitUntilIsRunning(Timedelta timeout) throws Exception {\nfinal URL status = new URL(SERVER_URL + \"/status\");\ntry {\nif (timeout.asSeconds() &gt; 5) {\nlog.debug(String.format(\"Waiting max %s until WDA server starts responding...\", timeout));\n}\nnew UrlChecker().waitUntilAvailable(timeout.asMillis(), TimeUnit.MILLISECONDS, status);\nreturn true;\n} catch (UrlChecker.TimeoutException e) {\nreturn false;\n}\n}\nprivate static void ensureParentDirExistence() {\nif (!XCODEBUILD_LOG.getParentFile().exists()) {\nif (!XCODEBUILD_LOG.getParentFile().mkdirs()) {\nthrow new IllegalStateException(String.format(\n\"The script has failed to create '%s' folder for Appium logs. \" +\n\"Please make sure your account has correct access permissions on the parent folder(s)\",\nXCODEBUILD_LOG.getParentFile().getAbsolutePath()));\n}\n}\n}\nprivate void ensureToolsExistence() {\nif (isRealDevice &amp;&amp; !IPROXY_EXECUTABLE.exists()) {\nthrow new IllegalStateException(String.format(\"%s tool is expected to be installed (`npm install -g iproxy`)\",\nIPROXY_EXECUTABLE.getAbsolutePath()));\n}\nif (!XCODEBUILD_EXECUTABLE.exists()) {\nthrow new IllegalStateException(String.format(\"xcodebuild tool is not detected on the current system at %s\",\nXCODEBUILD_EXECUTABLE.getAbsolutePath()));\n}\nif (!WDA_PROJECT.exists()) {\nthrow new IllegalStateException(String.format(\"WDA project is expected to exist at %s\",\nWDA_PROJECT.getAbsolutePath()));\n}\n}\nprivate List&lt;String&gt; generateXcodebuildCmdline() {\nfinal List&lt;String&gt; result = new ArrayList&lt;&gt;();\nresult.add(XCODEBUILD_EXECUTABLE.getAbsolutePath());\nresult.add(\"clean build-for-testing test-without-building\");\nresult.add(String.format(\"-project %s\", WDA_PROJECT.getAbsolutePath()));\nresult.add(String.format(\"-scheme %s\", WDA_SCHEME));\nresult.add(String.format(\"-destination id=%s\", deviceId));\nresult.add(String.format(\"-configuration %s\", WDA_CONFIGURATION));\nresult.add(String.format(\"IPHONEOS_DEPLOYMENT_TARGET=%s\", platformVersion));\nresult.add(String.format(\"&gt; %s 2&gt;&amp;1 &amp;\", XCODEBUILD_LOG.getAbsolutePath()));\nreturn result;\n}\nprivate static List&lt;String&gt; generateKeychainUnlockCmdlines() throws Exception {\nfinal List&lt;String&gt; result = new ArrayList&lt;&gt;();\nresult.add(String.format(\"/usr/bin/security -v list-keychains -s %s\", KEYCHAIN.getAbsolutePath()));\nresult.add(String.format(\"/usr/bin/security -v unlock-keychain -p %s %s\",\nKEYCHAIN_PASSWORD, KEYCHAIN.getAbsolutePath()));\nresult.add(String.format(\"/usr/bin/security set-keychain-settings -t 3600 %s\", KEYCHAIN.getAbsolutePath()));\nreturn result;\n}\npublic synchronized void restart() throws Exception {\nif (isRealDevice &amp;&amp; failedRestartRetriesCount &gt;= MAX_REAL_DEVICE_RESTART_RETRIES) {\nthrow new IllegalStateException(String.format(\n\"WDA server cannot start on the connected device with udid %s after %s retries. \" +\n\"Reboot the device manually and try again\", deviceId, MAX_REAL_DEVICE_RESTART_RETRIES));\n}\nfinal String hostname = InetAddress.getLocalHost().getHostName();\nlog.info(String.format(\"Trying to (re)start WDA server on %s:%s...\", hostname, PORT));\nUnixProcessHelpers.killProcessesGracefully(IPROXY_EXECUTABLE.getName(), XCODEBUILD_EXECUTABLE.getName());\nfinal File scriptFile = File.createTempFile(\"script\", \".sh\");\ntry {\nfinal List&lt;String&gt; scriptContent = new ArrayList&lt;&gt;();\nscriptContent.add(\"#!/bin/bash\");\nif (isRealDevice &amp;&amp; isRunningInJenkinsNetwork()) {\nscriptContent.add(String.join(\"\\n\", generateKeychainUnlockCmdlines()));\n}\nif (isRealDevice) {\nscriptContent.add(String.join(\" \", IPROXY_CMDLINE));\n}\nfinal String wdaBuildCmdline = String.join(\" \", generateXcodebuildCmdline());\nlog.debug(String.format(\"Building WDA with command line:\\n%s\\n\", wdaBuildCmdline));\nscriptContent.add(wdaBuildCmdline);\ntry (Writer output = new BufferedWriter(new FileWriter(scriptFile))) {\noutput.write(String.join(\"\\n\", scriptContent));\n}\nnew ProcessBuilder(\"/bin/chmod\", \"u+x\", scriptFile.getCanonicalPath())\n.redirectErrorStream(true).start().waitFor(5, TimeUnit.SECONDS);\nfinal ProcessBuilder pb = new ProcessBuilder(\"/bin/bash\", scriptFile.getCanonicalPath());\nfinal Map&lt;String, String&gt; env = pb.environment();\n// This is needed for Jenkins\nenv.put(\"BUILD_ID\", \"dontKillMe\");\n// This line is important. If USE_PORT environment variable is not set then WDA\n// takes port number zero by default and won't accept any incoming requests\nenv.put(\"USE_PORT\", Integer.toString(PORT));\nlog.info(String.format(\"Waiting max %s for WDA to be (re)started on %s:%s...\", RESTART_TIMEOUT.toString(),\nhostname, PORT));\nfinal Timedelta started = Timedelta.now();\npb.redirectErrorStream(true).start().waitFor(RESTART_TIMEOUT.asMillis(), TimeUnit.MILLISECONDS);\nif (!waitUntilIsRunning(RESTART_TIMEOUT)) {\n++failedRestartRetriesCount;\nthrow new IllegalStateException(\nString.format(\"WDA server has failed to start after %s timeout on server '%s'.\\n\"\n+ \"Please make sure that iDevice is properly connected and you can build \"\n+ \"WDA manually from XCode.\\n\"\n+ \"Xcodebuild logs:\\n\\n%s\\n\\n\\niproxy logs:\\n\\n%s\\n\\n\\n\",\nRESTART_TIMEOUT, hostname,\ngetLog(XCODEBUILD_LOG).orElse(\"EMPTY\"), getLog(IPROXY_LOG).orElse(\"EMPTY\"))\n);\n}\nlog.info(String.format(\"WDA server has been successfully (re)started after %s \" +\n\"and now is listening on %s:%s\", Timedelta.now().diff(started).toString(), hostname, PORT));\n} finally {\nscriptFile.delete();\n}\n}\npublic boolean isRunning() throws Exception {\nif (!isProcessRunning(XCODEBUILD_EXECUTABLE.getName())\n|| (isRealDevice &amp;&amp; !isProcessRunning(IPROXY_EXECUTABLE.getName()))) {\nreturn false;\n}\nreturn waitUntilIsRunning(isRealDevice ? REAL_DEVICE_RUNNING_TIMEOUT : Timedelta.ofSeconds(3));\n}\npublic Optional&lt;String&gt; getLog(File logFile) {\nif (logFile.exists()) {\ntry {\nreturn Optional.of(new String(Files.readAllBytes(logFile.toPath()), Charset.forName(\"UTF-8\")));\n} catch (IOException e) {\ne.printStackTrace();\n}\n}\nreturn Optional.empty();\n}\n}\n</code></pre> <p>One should call this piece of code before to start Appium iOS driver, for example, in setUp method:</p> <pre><code>   if (!WDAServer.getInstance().isRunning()) {\nWDAServer.getInstance().restart();\n}\n</code></pre> <p>It is important to set webDriverAgentUrl capability for Appium driver to let it know that our WDA driver is ready for use:</p> <pre><code>    capabilities.setCapability(\"webDriverAgentUrl\", WDAServer.SERVER_URL);\n</code></pre>"},{"location":"wda-custom-server/#important-notes","title":"Important Notes","text":"<ul> <li>The process does not have direct access to keychain if it is executed by Jenkins agent,  so we need to prepare keychain before compiling WDA for real device, otherwise codesigning will fail</li> <li>We kill xcodebuild and iproxy processes before restart to make sure compilation succeeds even  if these are frozen</li> <li>We prepare a separate bash script and detach iproxy/xcodebuild processes, so they can continue  running in background even after the actual code execution is finished. This is extremely important  if multiple tests/suites are executed on the same machine/node in automation lab, which requires minimum  human interaction</li> <li>The value of BUILD_ID environment variable is changed to avoid killing of the background process  by Jenkins agent after the job is finished</li> <li>isRunning check is done by verifying the actual network endpoint</li> <li>The output of daemonized processes is logged, so it is possible to track errors and unexpected failures.  The content of the log files is automatically added to the actual error message if the server fails to (re)start.</li> <li>Real device id can be parsed from <code>system_profiler SPUSBDataType</code> output</li> <li>Simulator id can be parsed from <code>xcrun simctl list</code> output</li> <li>UrlChecker class is imported from org.openqa.selenium.net package</li> </ul>"}]}